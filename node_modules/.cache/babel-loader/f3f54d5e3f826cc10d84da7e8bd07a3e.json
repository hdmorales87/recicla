{"ast":null,"code":"import _classCallCheck from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\control_panel\\\\Smtp.js\";\n\n/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport DataGrid from '../data_grid/DataGrid';\nimport { cargarFilas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\n\nvar Smtp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Smtp, _Component);\n\n  function Smtp(props) {\n    var _this;\n\n    _classCallCheck(this, Smtp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Smtp).call(this, props));\n    state = {\n      idRow: 0\n    };\n    var sqlParams = {\n      sqlCols: ['correo', 'servidor', 'puerto', 'autenticacion', 'password', 'seguridad_smtp'],\n      sqlEmpresa: \"true\",\n      mode: 'rows'\n    };\n    cargarFilas('companies_smtp', '', 1, 0, '', '', sqlParams, 'rows').then(function (res) {\n      var response = res.data;\n\n      if (response.msg === \"error\") {\n        alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n      } else {\n        console.log(response); // if(response.)                                  \n        // this.setState({ loading: false },()=>{\n        //     globalState.dispatch({\n        //         type   : \"userData\",\n        //         params : response\n        //     });                                      \n        //     globalState.dispatch({\n        //         type   : \"nameUser\",\n        //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\n        //     });\n        //     globalState.dispatch({\n        //         type   : \"nameCompany\",\n        //         params : response1[0].razon_social.toUpperCase()\n        //     });\n        //     globalState.dispatch({\n        //         type   : \"imagen_usuario\",\n        //         params : response[0].imagen_usuario\n        //     }); \n        //     globalState.dispatch({\n        //         type   : \"idRol\",\n        //         params : response[0].id_rol\n        //     });\n        // });\n      }\n    }).catch(function (err) {\n      alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n    });\n    return _this;\n  }\n\n  _createClass(Smtp, [{\n    key: \"render\",\n    value: function render() {\n      var formParams = {\n        idRow: 1,\n        mainContainer: 'Smtp',\n        formulario: true,\n        titulo: 'Configuracion SMTP',\n        funcionClick: this.props.funcionClick,\n        apiField: 'companies_smtp',\n        formFields: [{\n          label: 'Servidor SMTP',\n          field: 'servidor',\n          type: 'text',\n          validation: '',\n          required: 'true'\n        }, {\n          label: 'Usuario',\n          field: 'correo',\n          type: 'text',\n          validation: 'email',\n          required: 'true'\n        }, {\n          label: 'Password',\n          field: 'password',\n          type: 'text',\n          validation: '',\n          required: 'true'\n        }, {\n          label: 'Puerto',\n          field: 'puerto',\n          type: 'text',\n          validation: 'entero',\n          required: 'true'\n        }, {\n          label: 'Seguridad',\n          field: 'seguridad_smtp',\n          type: 'select',\n          validation: '',\n          required: 'true',\n          dinamic: 'false',\n          valueName: 'nombre',\n          options: [{\n            id: 'no',\n            nombre: 'Ninguna'\n          }, {\n            id: 'tls',\n            nombre: 'TLS'\n          }, {\n            id: 'ssl',\n            nombre: 'SSL'\n          }]\n        },, {\n          label: 'Autenticacion',\n          field: 'autenticacion',\n          type: 'select',\n          validation: '',\n          required: 'true',\n          dinamic: 'false',\n          valueName: 'nombre',\n          options: [{\n            id: 'no',\n            nombre: 'No'\n          }, {\n            id: 'si',\n            nombre: 'Si'\n          }]\n        }, {\n          label: '',\n          field: 'id_empresa',\n          type: 'campo_empresa',\n          validation: '',\n          required: 'true'\n        }]\n      };\n      this.props.funcionClick('FormDataGrid', formParams);\n      return (//carga el componente que contiene la grilla de datos            \n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"hola\")\n      );\n    }\n  }]);\n\n  return Smtp;\n}(Component);\n\nexport default Smtp;","map":{"version":3,"sources":["C:\\PROYECTOS\\recicla\\src\\components\\control_panel\\Smtp.js"],"names":["React","Component","DataGrid","cargarFilas","alertify","Smtp","props","state","idRow","sqlParams","sqlCols","sqlEmpresa","mode","then","res","response","data","msg","alert","detail","console","log","catch","err","formParams","mainContainer","formulario","titulo","funcionClick","apiField","formFields","label","field","type","validation","required","dinamic","valueName","options","id","nombre"],"mappings":"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","sourcesContent":["/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DataGrid from '../data_grid/DataGrid';\r\nimport {cargarFilas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\n\r\nclass Smtp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        state={\r\n            idRow : 0\r\n        };\r\n        let sqlParams = {\r\n                            sqlCols : [\r\n                                'correo',\r\n                                'servidor',\r\n                                'puerto',\r\n                                'autenticacion',\r\n                                'password',\r\n                                'seguridad_smtp'                                \r\n                            ],\r\n                            sqlEmpresa : \"true\",\r\n                            mode : 'rows'                                                 \r\n                        }\r\n\r\n        cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } \r\n            else{\r\n                console.log(response);\r\n                // if(response.)                                  \r\n                // this.setState({ loading: false },()=>{\r\n                //     globalState.dispatch({\r\n                //         type   : \"userData\",\r\n                //         params : response\r\n                //     });                                      \r\n                //     globalState.dispatch({\r\n                //         type   : \"nameUser\",\r\n                //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"nameCompany\",\r\n                //         params : response1[0].razon_social.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"imagen_usuario\",\r\n                //         params : response[0].imagen_usuario\r\n                //     }); \r\n                //     globalState.dispatch({\r\n                //         type   : \"idRol\",\r\n                //         params : response[0].id_rol\r\n                //     });\r\n                // });\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n        }); \r\n    }\r\n  \trender() {\r\n        let formParams = {\r\n                            idRow : 1,\r\n                            mainContainer : 'Smtp',\r\n                            formulario : true,\r\n                            titulo : 'Configuracion SMTP',\r\n                            funcionClick : this.props.funcionClick,                             \r\n                            apiField : 'companies_smtp',\r\n                            formFields : [\r\n                                            {\r\n                                                label : 'Servidor SMTP',\r\n                                                field : 'servidor',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Usuario',\r\n                                                field : 'correo',\r\n                                                type  : 'text',\r\n                                                validation : 'email',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Password',\r\n                                                field : 'password',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Puerto',\r\n                                                field : 'puerto',\r\n                                                type  : 'text',\r\n                                                validation : 'entero',\r\n                                                required : 'true'                                        \r\n                                            },                                    \r\n                                            {\r\n                                                label : 'Seguridad',\r\n                                                field : 'seguridad_smtp',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'Ninguna',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'tls',\r\n                                                                nombre: 'TLS', \r\n                                                            },\r\n                                                            {\r\n                                                                id: 'ssl',\r\n                                                                nombre: 'SSL', \r\n                                                            }],                                        \r\n                                            },  \r\n                                            ,                                    \r\n                                            {\r\n                                                label : 'Autenticacion',\r\n                                                field : 'autenticacion',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'No',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'si',\r\n                                                                nombre: 'Si', \r\n                                                            }],                                        \r\n                                            },\r\n                                            {\r\n                                                label : '',\r\n                                                field : 'id_empresa',\r\n                                                type  : 'campo_empresa',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },                                                                 \r\n                                        ]\r\n                         }                 \r\n        this.props.funcionClick('FormDataGrid',formParams);               \r\n        return (//carga el componente que contiene la grilla de datos            \r\n            <div>hola</div>             \r\n        )\r\n    } \r\n}\r\n\r\nexport default Smtp"]},"metadata":{},"sourceType":"module"}