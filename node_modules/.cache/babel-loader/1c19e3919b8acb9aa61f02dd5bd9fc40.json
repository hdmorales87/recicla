{"ast":null,"code":"import _classCallCheck from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\control_panel\\\\Smtp.js\";\n\n/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport FormDataGrid from '../data_grid/FormDataGrid';\nimport { cargarFilas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\n\nvar Smtp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Smtp, _Component);\n\n  function Smtp(props) {\n    var _this;\n\n    _classCallCheck(this, Smtp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Smtp).call(this, props));\n    _this.state = {\n      idRow: 0\n    };\n    return _this;\n  }\n\n  _createClass(Smtp, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      var sqlParams = {\n        sqlCols: ['correo', 'servidor', 'puerto', 'autenticacion', 'password', 'seguridad_smtp'],\n        sqlEmpresa: \"true\",\n        mode: 'rows'\n      };\n      cargarFilas('companies_smtp', '', 1, 0, '', '', sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var idRow = 0;\n\n          if (response.length > 0) {\n            idRow = response[0];\n          }\n\n          _this2.setState({\n            idRow: idRow\n          }, function () {\n            var formParams = {\n              idRow: idRow,\n              mainContainer: 'Smtp',\n              formulario: true,\n              titulo: 'Configuracion SMTP',\n              funcionClick: _this2.props.funcionClick,\n              apiField: 'companies_smtp',\n              formFields: [{\n                label: 'Servidor SMTP',\n                field: 'servidor',\n                type: 'text',\n                validation: '',\n                required: 'true'\n              }, {\n                label: 'Usuario',\n                field: 'correo',\n                type: 'text',\n                validation: 'email',\n                required: 'true'\n              }, {\n                label: 'Password',\n                field: 'password',\n                type: 'text',\n                validation: '',\n                required: 'true'\n              }, {\n                label: 'Puerto',\n                field: 'puerto',\n                type: 'text',\n                validation: 'entero',\n                required: 'true'\n              }, {\n                label: 'Seguridad',\n                field: 'seguridad_smtp',\n                type: 'select',\n                validation: '',\n                required: 'true',\n                dinamic: 'false',\n                valueName: 'nombre',\n                options: [{\n                  id: 'no',\n                  nombre: 'Ninguna'\n                }, {\n                  id: 'tls',\n                  nombre: 'TLS'\n                }, {\n                  id: 'ssl',\n                  nombre: 'SSL'\n                }]\n              },, {\n                label: 'Autenticacion',\n                field: 'autenticacion',\n                type: 'select',\n                validation: '',\n                required: 'true',\n                dinamic: 'false',\n                valueName: 'nombre',\n                options: [{\n                  id: 'no',\n                  nombre: 'No'\n                }, {\n                  id: 'si',\n                  nombre: 'Si'\n                }]\n              }, {\n                label: '',\n                field: 'id_empresa',\n                type: 'campo_empresa',\n                validation: '',\n                required: 'true'\n              }] //this.props.funcionClick('FormDataGrid',formParams);               \n\n            };\n          }); // if(response.)                                  \n          // this.setState({ loading: false },()=>{\n          //     globalState.dispatch({\n          //         type   : \"userData\",\n          //         params : response\n          //     });                                      \n          //     globalState.dispatch({\n          //         type   : \"nameUser\",\n          //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\n          //     });\n          //     globalState.dispatch({\n          //         type   : \"nameCompany\",\n          //         params : response1[0].razon_social.toUpperCase()\n          //     });\n          //     globalState.dispatch({\n          //         type   : \"imagen_usuario\",\n          //         params : response[0].imagen_usuario\n          //     }); \n          //     globalState.dispatch({\n          //         type   : \"idRol\",\n          //         params : response[0].id_rol\n          //     });\n          // });\n\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (//carga el componente que contiene la grilla de datos            \n        React.createElement(FormDataGrid, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return Smtp;\n}(Component);\n\nexport default Smtp;","map":{"version":3,"sources":["C:\\PROYECTOS\\recicla\\src\\components\\control_panel\\Smtp.js"],"names":["React","Component","FormDataGrid","cargarFilas","alertify","Smtp","props","state","idRow","sqlParams","sqlCols","sqlEmpresa","mode","then","res","response","data","msg","alert","detail","length","setState","formParams","mainContainer","formulario","titulo","funcionClick","apiField","formFields","label","field","type","validation","required","dinamic","valueName","options","id","nombre","catch","err"],"mappings":"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","sourcesContent":["/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport FormDataGrid from '../data_grid/FormDataGrid';\r\nimport {cargarFilas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\n\r\nclass Smtp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            idRow : 0\r\n        };        \r\n    }\r\n    componentWillMount(){\r\n        let sqlParams = {\r\n                            sqlCols : [\r\n                                'correo',\r\n                                'servidor',\r\n                                'puerto',\r\n                                'autenticacion',\r\n                                'password',\r\n                                'seguridad_smtp'                                \r\n                            ],\r\n                            sqlEmpresa : \"true\",\r\n                            mode : 'rows'                                                 \r\n                        }\r\n\r\n        cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } \r\n            else{\r\n                let idRow = 0;\r\n                if(response.length > 0){\r\n                    idRow = response[0];\r\n                }\r\n                this.setState({ idRow: idRow },()=>{\r\n                    let formParams = {\r\n                            idRow : idRow,\r\n                            mainContainer : 'Smtp',\r\n                            formulario : true,\r\n                            titulo : 'Configuracion SMTP',\r\n                            funcionClick : this.props.funcionClick,                             \r\n                            apiField : 'companies_smtp',\r\n                            formFields : [\r\n                                            {\r\n                                                label : 'Servidor SMTP',\r\n                                                field : 'servidor',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Usuario',\r\n                                                field : 'correo',\r\n                                                type  : 'text',\r\n                                                validation : 'email',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Password',\r\n                                                field : 'password',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Puerto',\r\n                                                field : 'puerto',\r\n                                                type  : 'text',\r\n                                                validation : 'entero',\r\n                                                required : 'true'                                        \r\n                                            },                                    \r\n                                            {\r\n                                                label : 'Seguridad',\r\n                                                field : 'seguridad_smtp',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'Ninguna',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'tls',\r\n                                                                nombre: 'TLS', \r\n                                                            },\r\n                                                            {\r\n                                                                id: 'ssl',\r\n                                                                nombre: 'SSL', \r\n                                                            }],                                        \r\n                                            },  \r\n                                            ,                                    \r\n                                            {\r\n                                                label : 'Autenticacion',\r\n                                                field : 'autenticacion',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'No',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'si',\r\n                                                                nombre: 'Si', \r\n                                                            }],                                        \r\n                                            },\r\n                                            {\r\n                                                label : '',\r\n                                                field : 'id_empresa',\r\n                                                type  : 'campo_empresa',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },                                                                 \r\n                                        ]\r\n                         } \r\n                    //this.props.funcionClick('FormDataGrid',formParams);               \r\n                });\r\n                // if(response.)                                  \r\n                // this.setState({ loading: false },()=>{\r\n                //     globalState.dispatch({\r\n                //         type   : \"userData\",\r\n                //         params : response\r\n                //     });                                      \r\n                //     globalState.dispatch({\r\n                //         type   : \"nameUser\",\r\n                //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"nameCompany\",\r\n                //         params : response1[0].razon_social.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"imagen_usuario\",\r\n                //         params : response[0].imagen_usuario\r\n                //     }); \r\n                //     globalState.dispatch({\r\n                //         type   : \"idRol\",\r\n                //         params : response[0].id_rol\r\n                //     });\r\n                // });\r\n                \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n        }); \r\n    }\r\n  \trender() {\r\n          \r\n                     \r\n        return (//carga el componente que contiene la grilla de datos            \r\n            <FormDataGrid />             \r\n        )\r\n    } \r\n}\r\n\r\nexport default Smtp"]},"metadata":{},"sourceType":"module"}