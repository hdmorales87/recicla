{"ast":null,"code":"import _classCallCheck from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\control_panel\\\\Smtp.js\";\n\n/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport DataGrid from '../data_grid/DataGrid';\n\nvar Smtp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Smtp, _Component);\n\n  function Smtp(props) {\n    var _this;\n\n    _classCallCheck(this, Smtp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Smtp).call(this, props));\n    var sqlParams = {\n      sqlCols: ['correo', 'servidor', 'puerto', 'autenticacion', 'password', 'T1.primer_nombre', 'T1.segundo_nombre', 'T1.primer_apellido', 'T1.segundo_apellido', 'T1.email', 'T1.direccion', 'T1.telefono', 'T1.id_rol', 'RL.nombre AS rol', 'T1.imagen_usuario'],\n      sqlWhere: [' AND T1.email = \\'' + usuario + '\\''],\n      sqlJoin: ['INNER JOIN document_types AS DT ON (DT.id = T1.id_tipo_documento)', 'INNER JOIN roles AS RL ON (RL.id = T1.id_rol)'],\n      mode: 'rows'\n    };\n    cargarFilas('users', usuario, 1, 0, '', '', sqlParams, 'rows').then(function (res) {\n      var response = res.data;\n\n      if (response.msg === \"error\") {\n        alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n      } else {\n        _this.setState({\n          loading: false\n        }, function () {\n          globalState.dispatch({\n            type: \"userData\",\n            params: response\n          });\n          globalState.dispatch({\n            type: \"nameUser\",\n            params: response[0].primer_nombre.toUpperCase() + ' ' + response[0].primer_apellido.toUpperCase()\n          });\n          globalState.dispatch({\n            type: \"nameCompany\",\n            params: response1[0].razon_social.toUpperCase()\n          });\n          globalState.dispatch({\n            type: \"imagen_usuario\",\n            params: response[0].imagen_usuario\n          });\n          globalState.dispatch({\n            type: \"idRol\",\n            params: response[0].id_rol\n          });\n        });\n      }\n    }).catch(function (err) {\n      alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n    });\n    return _this;\n  }\n\n  _createClass(Smtp, [{\n    key: \"render\",\n    value: function render() {\n      var formParams = {\n        idRow: 1,\n        mainContainer: 'Smtp',\n        formulario: true,\n        titulo: 'Configuracion SMTP',\n        funcionClick: this.props.funcionClick,\n        apiField: 'companies_smtp',\n        formFields: [{\n          label: 'Servidor SMTP',\n          field: 'servidor',\n          type: 'text',\n          validation: '',\n          required: 'true'\n        }, {\n          label: 'Usuario',\n          field: 'correo',\n          type: 'text',\n          validation: 'email',\n          required: 'true'\n        }, {\n          label: 'Password',\n          field: 'password',\n          type: 'text',\n          validation: '',\n          required: 'true'\n        }, {\n          label: 'Puerto',\n          field: 'puerto',\n          type: 'text',\n          validation: 'entero',\n          required: 'true'\n        }, {\n          label: 'Seguridad',\n          field: 'seguridad_smtp',\n          type: 'select',\n          validation: '',\n          required: 'true',\n          dinamic: 'false',\n          valueName: 'nombre',\n          options: [{\n            id: 'no',\n            nombre: 'Ninguna'\n          }, {\n            id: 'tls',\n            nombre: 'TLS'\n          }, {\n            id: 'ssl',\n            nombre: 'SSL'\n          }]\n        },, {\n          label: 'Autenticacion',\n          field: 'autenticacion',\n          type: 'select',\n          validation: '',\n          required: 'true',\n          dinamic: 'false',\n          valueName: 'nombre',\n          options: [{\n            id: 'no',\n            nombre: 'No'\n          }, {\n            id: 'si',\n            nombre: 'Si'\n          }]\n        }, {\n          label: '',\n          field: 'id_empresa',\n          type: 'campo_empresa',\n          validation: '',\n          required: 'true'\n        }]\n      };\n      this.props.funcionClick('FormDataGrid', formParams);\n      return (//carga el componente que contiene la grilla de datos            \n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, \"hola\")\n      );\n    }\n  }]);\n\n  return Smtp;\n}(Component);\n\nexport default Smtp;","map":{"version":3,"sources":["C:\\PROYECTOS\\recicla\\src\\components\\control_panel\\Smtp.js"],"names":["React","Component","DataGrid","Smtp","props","sqlParams","sqlCols","sqlWhere","usuario","sqlJoin","mode","cargarFilas","then","res","response","data","msg","alertify","alert","detail","setState","loading","globalState","dispatch","type","params","primer_nombre","toUpperCase","primer_apellido","response1","razon_social","imagen_usuario","id_rol","catch","err","formParams","idRow","mainContainer","formulario","titulo","funcionClick","apiField","formFields","label","field","validation","required","dinamic","valueName","options","id","nombre"],"mappings":"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","sourcesContent":["/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DataGrid from '../data_grid/DataGrid';\r\n\r\nclass Smtp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        let sqlParams = {\r\n                            sqlCols : [\r\n                                'correo',\r\n                                'servidor',\r\n                                'puerto',\r\n                                'autenticacion',\r\n                                'password',\r\n                                'T1.primer_nombre',\r\n                                'T1.segundo_nombre',\r\n                                'T1.primer_apellido',\r\n                                'T1.segundo_apellido',\r\n                                'T1.email',\r\n                                'T1.direccion',\r\n                                'T1.telefono',\r\n                                'T1.id_rol',\r\n                                'RL.nombre AS rol',\r\n                                'T1.imagen_usuario'\r\n                            ],\r\n                            sqlWhere : [ ' AND T1.email = \\''+usuario+'\\'' ],                            \r\n                            sqlJoin : [\r\n                                'INNER JOIN document_types AS DT ON (DT.id = T1.id_tipo_documento)', \r\n                                'INNER JOIN roles AS RL ON (RL.id = T1.id_rol)' \r\n                            ],\r\n                            mode : 'rows'                                                 \r\n                        }\r\n                        cargarFilas('users',usuario,1,0,'','',sqlParams,'rows')\r\n                        .then(res => {\r\n                            var response = res.data; \r\n                            if (response.msg === \"error\") {\r\n                                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n                            } \r\n                            else{                                  \r\n                                this.setState({ loading: false },()=>{\r\n                                    globalState.dispatch({\r\n                                        type   : \"userData\",\r\n                                        params : response\r\n                                    });                                      \r\n                                    globalState.dispatch({\r\n                                        type   : \"nameUser\",\r\n                                        params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\r\n                                    });\r\n                                    globalState.dispatch({\r\n                                        type   : \"nameCompany\",\r\n                                        params : response1[0].razon_social.toUpperCase()\r\n                                    });\r\n                                    globalState.dispatch({\r\n                                        type   : \"imagen_usuario\",\r\n                                        params : response[0].imagen_usuario\r\n                                    }); \r\n                                    globalState.dispatch({\r\n                                        type   : \"idRol\",\r\n                                        params : response[0].id_rol\r\n                                    });\r\n                                });\r\n                            }\r\n                        })\r\n                        .catch( err => {            \r\n                            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n                        }); \r\n    }\r\n  \trender() {\r\n        let formParams = {\r\n                            idRow : 1,\r\n                            mainContainer : 'Smtp',\r\n                            formulario : true,\r\n                            titulo : 'Configuracion SMTP',\r\n                            funcionClick : this.props.funcionClick,                             \r\n                            apiField : 'companies_smtp',\r\n                            formFields : [\r\n                                            {\r\n                                                label : 'Servidor SMTP',\r\n                                                field : 'servidor',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Usuario',\r\n                                                field : 'correo',\r\n                                                type  : 'text',\r\n                                                validation : 'email',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Password',\r\n                                                field : 'password',\r\n                                                type  : 'text',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },\r\n                                            {\r\n                                                label : 'Puerto',\r\n                                                field : 'puerto',\r\n                                                type  : 'text',\r\n                                                validation : 'entero',\r\n                                                required : 'true'                                        \r\n                                            },                                    \r\n                                            {\r\n                                                label : 'Seguridad',\r\n                                                field : 'seguridad_smtp',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'Ninguna',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'tls',\r\n                                                                nombre: 'TLS', \r\n                                                            },\r\n                                                            {\r\n                                                                id: 'ssl',\r\n                                                                nombre: 'SSL', \r\n                                                            }],                                        \r\n                                            },  \r\n                                            ,                                    \r\n                                            {\r\n                                                label : 'Autenticacion',\r\n                                                field : 'autenticacion',\r\n                                                type  : 'select',\r\n                                                validation : '',\r\n                                                required : 'true',\r\n                                                dinamic : 'false',\r\n                                                valueName : 'nombre',\r\n                                                options :  [{\r\n                                                                id: 'no',\r\n                                                                nombre: 'No',\r\n                                                            },\r\n                                                            {\r\n                                                                id: 'si',\r\n                                                                nombre: 'Si', \r\n                                                            }],                                        \r\n                                            },\r\n                                            {\r\n                                                label : '',\r\n                                                field : 'id_empresa',\r\n                                                type  : 'campo_empresa',\r\n                                                validation : '',\r\n                                                required : 'true'                                        \r\n                                            },                                                                 \r\n                                        ]\r\n                         }                 \r\n        this.props.funcionClick('FormDataGrid',formParams);               \r\n        return (//carga el componente que contiene la grilla de datos            \r\n            <div>hola</div>             \r\n        )\r\n    } \r\n}\r\n\r\nexport default Smtp"]},"metadata":{},"sourceType":"module"}