{"ast":null,"code":"import _defineProperty from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\data_grid\\\\FormDataGrid.js\";\n\n/**\r\n* CLASS FormDataGrid\r\n*\r\n* Contiene el formulario dinamico del datagrid\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ComboBoxFormDataGrid from './ComboBoxFormDataGrid';\nimport configJson from '../configuration/configuration.json';\nimport globalState from '../configuration/GlobalState';\nimport { divMouseOver, divMouseOut, validarEmail, modalLoading } from '../configuration/GlobalFunctions';\nimport Window from '../window/Window';\nimport { insertarActualizarFila, eliminarFilas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\nimport './dataGrid.css';\n\nvar FormDataGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormDataGrid, _Component);\n\n  function FormDataGrid(props) {\n    var _this;\n\n    _classCallCheck(this, FormDataGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormDataGrid).call(this, props)); //cargar dinamicamente los estados        \n\n    _this.state = {}; //botones de cancelar y guardar      \n\n    _this.handleCancelButton = _this.handleCancelButton.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSaveButton = _this.handleSaveButton.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleConfirmAction = _this.handleConfirmAction.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.funcionEditDataSelect = _this.funcionEditDataSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(FormDataGrid, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.props.parametro.formFields.forEach(function (formFields, i) {\n        if (_this2.props.parametro.idRow !== 0) {\n          if (_this2.props.parametro.idRow[formFields.field] === '' || _this2.props.parametro.idRow[formFields.field] === undefined || _this2.props.parametro.idRow[formFields.field] === null) {\n            _this2.setState(_defineProperty({}, formFields.field, ''));\n\n            if (formFields.type === 'campo_empresa') {}\n          } else {\n            _this2.setState(_defineProperty({}, formFields.field, _this2.props.parametro.idRow[formFields.field]));\n\n            if (formFields.type === 'data_select') {\n              //adicional pone el texto en el input del data select\n              _this2.setState(_defineProperty({}, formFields.dataParams.fetchData.valueField, _this2.props.parametro.idRow[formFields.dataParams.fetchData.valueField]));\n            }\n          }\n        } else {\n          if (formFields.type === 'select') {\n            _this2.setState(_defineProperty({}, formFields.field, 1));\n          } else {\n            _this2.setState(_defineProperty({}, formFields.field, ''));\n          }\n        }\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        windowDataSelectId: ''\n      });\n    }\n  }, {\n    key: \"handleCancelButton\",\n    value: function handleCancelButton() {\n      this.props.funcionClick(this.props.parametro.mainContainer);\n    }\n  }, {\n    key: \"handleSaveButton\",\n    value: function handleSaveButton(id) {\n      var _this3 = this;\n\n      //recorrido dinamico de los campos y cargar dinamicamente el arrayData\n      var arrayData = {};\n      var errors = 0;\n      this.props.parametro.formFields.forEach(function (formFields, i) {\n        if ((_this3.state[formFields.field] === undefined || _this3.state[formFields.field] === '') && formFields.required === 'true') {\n          alertify.error('Digite el campo ' + formFields.label + '!');\n          errors++;\n          return;\n        } else {\n          if (formFields.validation === 'email') {\n            if (!validarEmail(_this3.state[formFields.field])) {\n              alertify.error('No es una cuenta de Email Valida en el campo ' + formFields.label + '!');\n              errors++;\n              return;\n            }\n          }\n\n          arrayData[formFields.field] = _this3.state[formFields.field];\n        }\n      }); //hay errores?\n\n      if (errors > 0) {\n        return;\n      }\n\n      var method = '';\n\n      if (id > 0) {\n        //si es update o insert           \n        method = 'put';\n        arrayData['id'] = id; //mandar el ID\n      } else {\n        method = 'post';\n      }\n\n      modalLoading(true); //ajax que llama a la API para insertar o actualizar        \n\n      insertarActualizarFila(method, this.props.parametro.apiField, arrayData).then(function (response) {\n        modalLoading(false);\n        response = response.data;\n\n        if (response.msg === 'error') {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          //aqui es donde refresca el datagrid una vez se han hecho los cambios\n          _this3.props.funcionClick(_this3.props.parametro.mainContainer);\n        }\n      }).catch(function (error) {\n        modalLoading(false);\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + error);\n      });\n    } //manejo dinamico de los estados, con esto actualizo el valor de cualquier campo para enviarlos a la API\n\n  }, {\n    key: \"handleStateChange\",\n    value: function handleStateChange(validation, e) {\n      var ingresado = e.target.value; //validaciones\n\n      if (validation === 'mayusculas') {\n        ingresado = ingresado.toUpperCase();\n      }\n\n      if (validation === 'email') {\n        ingresado = ingresado.toLowerCase();\n      }\n\n      if (validation === 'entero') {\n        ingresado = ingresado.replace(/[^\\d]/g, '');\n      }\n\n      if (validation === 'numero_real') {\n        ingresado = ingresado.replace(/[^\\d.]/g, '');\n      }\n\n      if (validation === 'numero_texto') {\n        ingresado = ingresado.replace(/[^a-zA-Z0-9&]/g, '');\n        ingresado = ingresado.toUpperCase();\n      }\n\n      this.setState(_defineProperty({}, e.target.name, ingresado));\n    }\n  }, {\n    key: \"handleDeleteButton\",\n    value: function handleDeleteButton(id) {\n      //boton eliminar\n      alertify.confirm('Confirmacion', 'Esta seguro(a) de eliminar este item?', this.handleConfirmAction.bind(this, id), function () {});\n    }\n  }, {\n    key: \"handleConfirmAction\",\n    value: function handleConfirmAction(id) {\n      var _this4 = this;\n\n      //CODIGO PARA ELIMINAR LA FILA        \n      eliminarFilas(this.props.parametro.apiField, id).then(function (response) {\n        response = response.data;\n\n        if (response.msg === 'error') {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else if (response.msg === 'notExist') {\n          alertify.alert('Error!', 'El dato a eliminar no existe!');\n        }\n\n        _this4.props.funcionClick('WelcomePage');\n\n        _this4.props.funcionClick(_this4.props.parametro.mainContainer);\n      }).catch(function (error) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + error);\n      });\n    }\n  }, {\n    key: \"handleDataSelect\",\n    value: function handleDataSelect(dataParams) {\n      var _this5 = this;\n\n      //al dar clic en el campo de texto\n      dataParams['funcionEdit'] = this.funcionEditDataSelect;\n      this.setState({\n        windowDataSelectId: \"windowFormDataSelect_\" + this.props.parametro.mainContainer + \"_\" + dataParams.idField\n      }, function () {\n        globalState.dispatch({\n          type: \"windowFormDataSelect_\" + _this5.props.parametro.mainContainer + \"_\" + dataParams.idField,\n          params: {\n            visible: true,\n            params: dataParams\n          }\n        });\n      });\n    }\n  }, {\n    key: \"funcionEditDataSelect\",\n    value: function funcionEditDataSelect(data, params) {\n      var _this6 = this;\n\n      //la funcion que carga los datos del DataSelect        \n      this.setState(_defineProperty({}, params.idField, data.id));\n      this.setState(_defineProperty({}, params.valueField, data[params.fieldFetch]));\n      this.setState({\n        windowDataSelectId: \"windowFormDataSelect_\" + this.props.parametro.mainContainer + \"_\" + params.idField\n      }, function () {\n        globalState.dispatch({\n          type: \"windowFormDataSelect_\" + _this6.props.parametro.mainContainer + \"_\" + params.idField,\n          params: {\n            visible: false\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this7 = this;\n\n      var titulo = 'Agregar';\n      var id = 0;\n      var field = '';\n\n      if (this.props.parametro.idRow !== 0) {\n        titulo = 'Editar';\n        id = this.props.parametro.idRow.id;\n      }\n\n      return (//carga dinamica del formulario\t  \t\t  \t  \t\n        React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"table-responsive mt-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"titulo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201\n          },\n          __self: this\n        }, titulo, \" \", this.props.parametro.titulo)), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"table-responsive mb-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204\n          },\n          __self: this\n        }, React.createElement(Form, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205\n          },\n          __self: this\n        }, //cargar dinamicamente los campos, dependiendo si es input o select\n        this.props.parametro.formFields.map(function (formFields, i) {\n          if (formFields.type === 'text' || formFields.type === 'date') {\n            field = React.createElement(Form.Group, {\n              key: i,\n              controlId: \"formBasicTipoCompra\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 210\n              },\n              __self: this\n            }, React.createElement(Form.Label, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 211\n              },\n              __self: this\n            }, formFields.label), React.createElement(Form.Control, {\n              name: formFields.field,\n              type: formFields.type,\n              onChange: _this7.handleStateChange.bind(_this7, formFields.validation),\n              value: _this7.state[formFields.field],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 212\n              },\n              __self: this\n            }));\n          } else if (formFields.type === 'select') {\n            field = React.createElement(Form.Group, {\n              key: i,\n              controlId: \"formBasicTipoCompra\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 216\n              },\n              __self: this\n            }, React.createElement(Form.Label, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 217\n              },\n              __self: this\n            }, formFields.label), React.createElement(ComboBoxFormDataGrid, {\n              valueName: formFields.valueName,\n              options: formFields.options,\n              apiField: formFields.apiField,\n              dinamic: formFields.dinamic,\n              name: formFields.field,\n              type: formFields.type,\n              functionChange: _this7.handleStateChange.bind(_this7, formFields.validation),\n              value: _this7.state[formFields.field],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 218\n              },\n              __self: this\n            }));\n          } else if (formFields.type === 'data_select') {\n            field = React.createElement(Form.Group, {\n              key: i,\n              controlId: \"formBasicTipoCompra\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 222\n              },\n              __self: this\n            }, React.createElement(\"input\", {\n              type: \"hidden\",\n              name: formFields.field,\n              value: _this7.state[formFields.field],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 223\n              },\n              __self: this\n            }), React.createElement(Form.Label, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 224\n              },\n              __self: this\n            }, formFields.label), React.createElement(Form.Control, {\n              style: {\n                backgroundColor: '#fff'\n              },\n              name: formFields.dataParams.fetchData.valueField,\n              type: \"text\",\n              onClick: _this7.handleDataSelect.bind(_this7, formFields.dataParams),\n              value: _this7.state[formFields.dataParams.fetchData.valueField] || 'Seleccione...',\n              readOnly: true,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 225\n              },\n              __self: this\n            }));\n          } else if (formFields.type === 'campo_empresa') {\n            field = React.createElement(\"input\", {\n              type: \"hidden\",\n              name: formFields.field,\n              value: _this7.state[formFields.field],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 229\n              },\n              __self: this\n            });\n          }\n\n          return field;\n        }), React.createElement(Button, {\n          id: \"formGridBtnSave\",\n          className: \"float-left mr-3\",\n          variant: \"primary\",\n          onClick: this.handleSaveButton.bind(this, id),\n          style: {\n            backgroundColor: configJson.fondoBotonGrilla\n          },\n          onMouseOut: divMouseOut.bind(this, 'formGridBtnSave', configJson.fondoBotonGrilla),\n          onMouseOver: divMouseOver.bind(this, 'formGridBtnSave', configJson.fondoBotonGrilla),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }, \"GUARDAR\"), React.createElement(Button, {\n          variant: \"secondary\",\n          className: \"float-left mr-3\",\n          onClick: this.handleCancelButton.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, \"CANCELAR\"), this.props.parametro.idRow !== 0 ? React.createElement(Button, {\n          id: \"formGridBtnDelete\",\n          className: \"float-left mr-3\",\n          variant: \"danger\",\n          onClick: this.handleDeleteButton.bind(this, id),\n          onMouseOut: divMouseOut.bind(this, \"formGridBtnDelete\", \"#dc3545\"),\n          onMouseOver: divMouseOver.bind(this, \"formGridBtnDelete\", \"#dc3545\"),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, \"ELIMINAR\") : \"\"), React.createElement(Window //ventana para el data select\n        , {\n          id: this.state.windowDataSelectId,\n          title: \"Seleccione ...\",\n          width: \"400px\",\n          height: \"300px\",\n          tbar: \"false\",\n          componente: \"DataGridSelect\",\n          params: \"\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }))))\n      );\n    }\n  }]);\n\n  return FormDataGrid;\n}(Component);\n\nexport default FormDataGrid;","map":{"version":3,"sources":["D:\\PROYECTOS\\recicla\\src\\components\\data_grid\\FormDataGrid.js"],"names":["React","Component","Form","Button","ComboBoxFormDataGrid","configJson","globalState","divMouseOver","divMouseOut","validarEmail","modalLoading","Window","insertarActualizarFila","eliminarFilas","alertify","FormDataGrid","props","state","handleCancelButton","bind","handleSaveButton","handleConfirmAction","funcionEditDataSelect","parametro","formFields","forEach","i","idRow","field","undefined","setState","type","dataParams","fetchData","valueField","windowDataSelectId","funcionClick","mainContainer","id","arrayData","errors","required","error","label","validation","method","apiField","then","response","data","msg","alert","detail","catch","e","ingresado","target","value","toUpperCase","toLowerCase","replace","name","confirm","idField","dispatch","params","visible","fieldFetch","titulo","map","handleStateChange","valueName","options","dinamic","backgroundColor","handleDataSelect","fondoBotonGrilla","handleDeleteButton"],"mappings":"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","sourcesContent":["/**\r\n* CLASS FormDataGrid\r\n*\r\n* Contiene el formulario dinamico del datagrid\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ComboBoxFormDataGrid from './ComboBoxFormDataGrid';\r\nimport configJson from '../configuration/configuration.json';\r\nimport globalState from '../configuration/GlobalState';\r\nimport {divMouseOver,divMouseOut,validarEmail,modalLoading} from '../configuration/GlobalFunctions';\r\nimport Window from '../window/Window';\r\nimport {insertarActualizarFila,eliminarFilas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\nimport './dataGrid.css'; \r\n\r\nclass FormDataGrid extends Component {\r\n  \t\r\n  \tconstructor(props) {\r\n        super(props);\r\n        //cargar dinamicamente los estados        \r\n        this.state = {};           \r\n        //botones de cancelar y guardar      \r\n        this.handleCancelButton = this.handleCancelButton.bind(this);\r\n        this.handleSaveButton   = this.handleSaveButton.bind(this);\r\n        this.handleConfirmAction = this.handleConfirmAction.bind(this);\r\n        this.funcionEditDataSelect = this.funcionEditDataSelect.bind(this);\r\n    } \r\n    componentWillMount(){\r\n        this.props.parametro.formFields.forEach((formFields,i) => {            \r\n            if(this.props.parametro.idRow !== 0){                \r\n                if(this.props.parametro.idRow[formFields.field] === '' || this.props.parametro.idRow[formFields.field] === undefined || this.props.parametro.idRow[formFields.field] === null){\r\n                    this.setState({[formFields.field] : ''});\r\n                    if(formFields.type==='campo_empresa'){\r\n\r\n                    }\r\n                }\r\n                else{         \r\n                    this.setState({[formFields.field] : this.props.parametro.idRow[formFields.field]});           \r\n                    if(formFields.type==='data_select'){//adicional pone el texto en el input del data select\r\n                        this.setState({[formFields.dataParams.fetchData.valueField] : this.props.parametro.idRow[formFields.dataParams.fetchData.valueField]});\r\n                    }\r\n                }\r\n            }\r\n            else{\r\n                if(formFields.type==='select'){\r\n                    this.setState({[formFields.field] : 1});            \r\n                }\r\n                else{                    \r\n                    this.setState({[formFields.field] : ''});                          \r\n                }                \r\n            }\r\n        });\r\n    } \r\n    componentDidMount(){\r\n        this.setState({windowDataSelectId : ''});\r\n    } \r\n    handleCancelButton(){\r\n        this.props.funcionClick(this.props.parametro.mainContainer);        \r\n    }\r\n    handleSaveButton(id){\r\n        //recorrido dinamico de los campos y cargar dinamicamente el arrayData\r\n        var arrayData = {};\r\n        var errors = 0;            \r\n\r\n        this.props.parametro.formFields.forEach((formFields,i) => {\r\n            if((this.state[formFields.field] === undefined || this.state[formFields.field] === '') && formFields.required === 'true'){\r\n                alertify.error('Digite el campo '+formFields.label+'!'); \r\n                errors++;\r\n                return;\r\n            } \r\n            else{\r\n                if(formFields.validation === 'email'){\r\n                    if(!validarEmail(this.state[formFields.field])){\r\n                        alertify.error('No es una cuenta de Email Valida en el campo '+formFields.label+'!'); \r\n                        errors++;\r\n                        return;\r\n                    }\r\n                }                \r\n                arrayData[formFields.field] = this.state[formFields.field];\r\n            }\r\n        });\r\n        //hay errores?\r\n        if(errors > 0){\r\n            return;\r\n        }            \r\n      \r\n        var method = '';\r\n\r\n        if(id>0){//si es update o insert           \r\n            method = 'put';\r\n            arrayData['id'] = id;//mandar el ID\r\n        }\r\n        else{            \r\n            method = 'post';\r\n        }   \r\n        modalLoading(true);     \r\n        //ajax que llama a la API para insertar o actualizar        \r\n        insertarActualizarFila(method,this.props.parametro.apiField,arrayData)\r\n        .then(response => {\r\n            modalLoading(false); \r\n            response = response.data;\r\n            if(response.msg === 'error'){\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail); \r\n            }\r\n            else {\r\n                //aqui es donde refresca el datagrid una vez se han hecho los cambios\r\n                this.props.funcionClick(this.props.parametro.mainContainer);              \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            modalLoading(false); \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+error);\r\n        });\r\n    }\r\n    //manejo dinamico de los estados, con esto actualizo el valor de cualquier campo para enviarlos a la API\r\n    handleStateChange(validation,e) {         \r\n        var ingresado = e.target.value; //validaciones\r\n        if(validation === 'mayusculas'){\r\n            ingresado = ingresado.toUpperCase();\r\n        }\r\n        if(validation === 'email'){\r\n            ingresado = ingresado.toLowerCase();\r\n        }\r\n        if(validation === 'entero'){\r\n            ingresado = ingresado.replace(/[^\\d]/g,'');\r\n        }\r\n        if(validation === 'numero_real'){\r\n            ingresado = ingresado.replace(/[^\\d.]/g,'');\r\n        } \r\n        if(validation === 'numero_texto'){\r\n            ingresado = ingresado.replace(/[^a-zA-Z0-9&]/g,'');\r\n            ingresado = ingresado.toUpperCase();\r\n        }       \r\n        \r\n        this.setState({ [e.target.name]: ingresado });\r\n            \r\n    }   \r\n    handleDeleteButton(id){//boton eliminar\r\n        alertify.confirm('Confirmacion', 'Esta seguro(a) de eliminar este item?', this.handleConfirmAction.bind(this,id), function(){});\r\n    }   \r\n    handleConfirmAction(id) {        \r\n        //CODIGO PARA ELIMINAR LA FILA        \r\n        eliminarFilas(this.props.parametro.apiField,id)\r\n        .then(response => {            \r\n            response = response.data;\r\n            if(response.msg === 'error'){\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail); \r\n            }\r\n            else if(response.msg === 'notExist'){\r\n                alertify.alert('Error!', 'El dato a eliminar no existe!'); \r\n            }\r\n            this.props.funcionClick('WelcomePage'); \r\n            this.props.funcionClick(this.props.parametro.mainContainer);\r\n        })\r\n        .catch(function (error) {\r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+error);\r\n        });        \r\n    }  \r\n    handleDataSelect(dataParams){//al dar clic en el campo de texto\r\n        dataParams['funcionEdit'] = this.funcionEditDataSelect;      \r\n        this.setState({windowDataSelectId : \"windowFormDataSelect_\"+this.props.parametro.mainContainer+\"_\"+dataParams.idField }, () => {\r\n            globalState.dispatch({\r\n                type   : \"windowFormDataSelect_\"+this.props.parametro.mainContainer+\"_\"+dataParams.idField,\r\n                params : {\r\n                    visible : true,\r\n                    params  : dataParams\r\n                }\r\n            })\r\n        });        \r\n    }\r\n    funcionEditDataSelect(data,params){//la funcion que carga los datos del DataSelect        \r\n        this.setState({[params.idField] : data.id });\r\n        this.setState({[params.valueField] : data[params.fieldFetch]});\r\n        this.setState({windowDataSelectId : \"windowFormDataSelect_\"+this.props.parametro.mainContainer+\"_\"+params.idField }, () => {\r\n            globalState.dispatch({\r\n                type   : \"windowFormDataSelect_\"+this.props.parametro.mainContainer+\"_\"+params.idField,\r\n                params : {\r\n                    visible : false,                    \r\n                }\r\n            })\r\n        }); \r\n    }  \r\n  \trender() {\r\n    \tvar titulo = 'Agregar';\r\n        var id = 0;\r\n        var field = '';\r\n    \tif(this.props.parametro.idRow !== 0){\r\n    \t\t  titulo = 'Editar';\r\n           id = this.props.parametro.idRow.id;\r\n    \t}          \t\t\t\r\n    \treturn (  //carga dinamica del formulario\t  \t\t  \t  \t\r\n    \t \t<div className=\"container\">\r\n               <div className=\"content\">\r\n                   <div className=\"table-responsive mt-4\">\r\n                       <div className=\"titulo\">{titulo} {this.props.parametro.titulo}</div>\r\n                   </div>\r\n                   <hr />\r\n                   <div className=\"table-responsive mb-3\">\t\r\n    \t\t\t    \t<Form>\r\n                           {\r\n                               //cargar dinamicamente los campos, dependiendo si es input o select\r\n                                this.props.parametro.formFields.map((formFields,i) => {\r\n                                    if(formFields.type === 'text' || formFields.type === 'date'){\r\n                                        field = <Form.Group key= {i} controlId=\"formBasicTipoCompra\">\r\n                                                    <Form.Label>{formFields.label}</Form.Label>\r\n                                                    <Form.Control name = {formFields.field} type={formFields.type} onChange={this.handleStateChange.bind(this,formFields.validation)} value={this.state[formFields.field]}/>                               \r\n                                               </Form.Group>\r\n                                    }                                    \r\n                                    else if(formFields.type === 'select'){\r\n                                        field = <Form.Group key= {i} controlId=\"formBasicTipoCompra\">\r\n                                                    <Form.Label>{formFields.label}</Form.Label>\r\n                                                    <ComboBoxFormDataGrid valueName = {formFields.valueName} options = {formFields.options} apiField={formFields.apiField} dinamic={formFields.dinamic} name = {formFields.field} type={formFields.type} functionChange={this.handleStateChange.bind(this,formFields.validation)} value={this.state[formFields.field]}/>                               \r\n                                               </Form.Group>\r\n                                    }\r\n                                    else if(formFields.type === 'data_select'){                                           \r\n                                        field = <Form.Group key= {i} controlId=\"formBasicTipoCompra\">\r\n                                                    <input type=\"hidden\" name = {formFields.field} value={this.state[formFields.field]} />\r\n                                                    <Form.Label>{formFields.label}</Form.Label>\r\n                                                    <Form.Control style={{backgroundColor:'#fff'}} name={formFields.dataParams.fetchData.valueField} type=\"text\" onClick={this.handleDataSelect.bind(this,formFields.dataParams)} value={this.state[formFields.dataParams.fetchData.valueField] || 'Seleccione...'} readOnly/>                                \r\n                                               </Form.Group>\r\n                                    }\r\n                                    else if(formFields.type === 'campo_empresa'){\r\n                                        field = <input type=\"hidden\" name = {formFields.field} value={this.state[formFields.field]} />\r\n                                    }\r\n                                    return field;\r\n                                })\r\n                            }\t\t\t\t\t\t  \t\t\t\t\t\t\t  \t\t\t\t\t\t  \t\r\n    \t\t\t\t  \t    <Button id=\"formGridBtnSave\" className=\"float-left mr-3\" variant=\"primary\" onClick={this.handleSaveButton.bind(this,id)} style={{backgroundColor:configJson.fondoBotonGrilla}} onMouseOut={divMouseOut.bind(this,'formGridBtnSave',configJson.fondoBotonGrilla)} onMouseOver={divMouseOver.bind(this,'formGridBtnSave',configJson.fondoBotonGrilla)}>\r\n    \t\t\t\t  \t      \tGUARDAR\r\n    \t\t\t\t  \t    </Button>                                                    \r\n    \t\t\t\t  \t    <Button variant=\"secondary\" className=\"float-left mr-3\" onClick={this.handleCancelButton.bind(this)}>\r\n    \t\t\t\t  \t      \tCANCELAR\r\n    \t\t\t\t  \t    </Button>\r\n                            {                                \r\n                                this.props.parametro.idRow !== 0 ?\r\n                                    <Button id=\"formGridBtnDelete\" className=\"float-left mr-3\" variant=\"danger\" onClick={this.handleDeleteButton.bind(this,id)} onMouseOut={divMouseOut.bind(this,\"formGridBtnDelete\",\"#dc3545\")} onMouseOver={divMouseOver.bind(this,\"formGridBtnDelete\",\"#dc3545\")}>\r\n                                        ELIMINAR\r\n                                    </Button>                                \r\n                                :  \"\"                                \r\n                            }                            \r\n    \t\t\t\t    </Form>\r\n                        <Window   //ventana para el data select\r\n                            id = {this.state.windowDataSelectId}                    \r\n                            title='Seleccione ...'\r\n                            width='400px' \r\n                            height='300px'                     \r\n                            tbar=\"false\"\r\n                            componente=\"DataGridSelect\"\r\n                            params=\"\" \r\n                        /> \r\n    \t\t\t    </div> \r\n    \t\t    </div> \t  \t \t\t       \r\n    \t    </div> \t\r\n    \t);\r\n  \t}\r\n}\r\n\r\nexport default FormDataGrid"]},"metadata":{},"sourceType":"module"}