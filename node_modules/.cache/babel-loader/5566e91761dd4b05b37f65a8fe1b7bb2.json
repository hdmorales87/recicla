{"ast":null,"code":"import _classCallCheck from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\dashboard\\\\DashboardContainer.js\";\n\n/**\r\n* CLASS DashboardContainer\r\n*\r\n* Contiene el contenedor con los indicadores\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport DashboardOption from './DashboardOption';\nimport { indicadorCompras, indicadorVentas, indicadorGraficoCompras, indicadorGraficoVentas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\nimport './dashboard.css';\n\nvar DashboardContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DashboardContainer, _Component);\n\n  function DashboardContainer(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardContainer).call(this, props));\n    _this.state = {\n      indicadorCompras: 0,\n      indicadorVentas: 0,\n      graficoCompras: [],\n      graficoVentas: []\n    };\n\n    _this.cargarIndicadores(_this.props.date1, _this.props.date2);\n\n    return _this;\n  }\n\n  _createClass(DashboardContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props !== prevProps) {\n        this.cargarIndicadores(this.props.date1, this.props.date2);\n      }\n    }\n  }, {\n    key: \"cargarIndicadores\",\n    value: function cargarIndicadores(date1, date2) {\n      var _this2 = this;\n\n      //cargar los indicadores\n      //formato de la fecha\n      date1 = new Date(date1.getTime() - date1.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n      date2 = new Date(date2.getTime() - date2.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0]; //cargar los indicadores      \n\n      indicadorCompras(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          _this2.setState({\n            indicadorCompras: response[0].total\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />' + err);\n      });\n      indicadorVentas(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          _this2.setState({\n            indicadorVentas: response[0].total\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorxxx!<br />' + err);\n      });\n      indicadorGraficoCompras(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayCompras = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayCompras.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoCompras: arrayCompras\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />' + err);\n      });\n      indicadorGraficoVentas(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayVentas = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayVentas.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoVentas: arrayVentas\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //LOS TIPOS DE GRAFICO SON PieChart y ColumnChart                    \n      return React.createElement(\"div\", {\n        id: \"DashboardContenedor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(DashboardOption, {\n        titulo: \"Compras\",\n        icono: \"shopping_cart\",\n        tipo: \"cifra\",\n        valor: this.state.indicadorCompras,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Ventas\",\n        icono: \"shopping_cart\",\n        tipo: \"cifra\",\n        valor: this.state.indicadorVentas,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Compras\",\n        icono: \"shopping_cart\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '500px',\n          height: '300px',\n          loader: 'Cargando...',\n          data: this.state.graficoCompras,\n          options: {\n            title: 'Compras por Producto'\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Ventas\",\n        icono: \"shopping_cart\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '500px',\n          height: '300px',\n          loader: 'Cargando...',\n          data: this.state.graficoCompras,\n          options: {\n            title: 'Compras por Producto'\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DashboardContainer;\n}(Component);\n\nexport default DashboardContainer;","map":{"version":3,"sources":["F:\\PROYECTOS\\recicla\\src\\components\\dashboard\\DashboardContainer.js"],"names":["React","Component","DashboardOption","indicadorCompras","indicadorVentas","indicadorGraficoCompras","indicadorGraficoVentas","alertify","DashboardContainer","props","state","graficoCompras","graficoVentas","cargarIndicadores","date1","date2","prevProps","Date","getTime","getTimezoneOffset","toISOString","split","then","res","response","data","msg","alert","detail","setState","total","catch","err","arrayCompras","i","push","tipo_producto","arrayVentas","chartType","width","height","loader","options","title","rootProps"],"mappings":"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","sourcesContent":["/**\r\n* CLASS DashboardContainer\r\n*\r\n* Contiene el contenedor con los indicadores\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DashboardOption from './DashboardOption';\r\nimport {indicadorCompras,indicadorVentas,indicadorGraficoCompras,indicadorGraficoVentas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\nimport './dashboard.css';\r\n\r\nclass DashboardContainer extends Component {\r\n    constructor(props){\r\n        super(props);  \r\n        this.state={\r\n            indicadorCompras : 0,\r\n            indicadorVentas  : 0,\r\n            graficoCompras : [],\r\n            graficoVentas  : []\r\n        };\r\n        this.cargarIndicadores(this.props.date1,this.props.date2);    \r\n    }\r\n    componentDidUpdate(prevProps){   \r\n        if (this.props !== prevProps) {           \r\n           this.cargarIndicadores(this.props.date1,this.props.date2); \r\n        }\r\n    }\r\n    cargarIndicadores(date1,date2){  //cargar los indicadores\r\n        //formato de la fecha\r\n        date1 = new Date(date1.getTime() - (date1.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\r\n        date2 = new Date(date2.getTime() - (date2.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\r\n        //cargar los indicadores      \r\n        indicadorCompras(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                           \r\n                this.setState({ indicadorCompras: response[0].total });                \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />'+err);\r\n        });\r\n\r\n        indicadorVentas(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {     \r\n                this.setState({ indicadorVentas: response[0].total });                \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorxxx!<br />'+err);\r\n        });\r\n\r\n        indicadorGraficoCompras(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayCompras = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayCompras.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                                \r\n                this.setState({ graficoCompras: arrayCompras })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />'+err);\r\n        });\r\n\r\n        indicadorGraficoVentas(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayVentas = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayVentas.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                             \r\n                this.setState({ graficoVentas: arrayVentas })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);\r\n        });\r\n    }\r\n  \trender() {\r\n        //LOS TIPOS DE GRAFICO SON PieChart y ColumnChart                    \r\n        return ( \r\n            <div id=\"DashboardContenedor\">\r\n                    <ul>\r\n                        <DashboardOption                              \r\n                            titulo='Compras' \r\n                            icono=\"shopping_cart\" \r\n                            tipo=\"cifra\" \r\n                            valor={this.state.indicadorCompras}\r\n                        />  \r\n                        <DashboardOption                             \r\n                            titulo='Ventas' \r\n                            icono=\"shopping_cart\" \r\n                            tipo=\"cifra\" \r\n                            valor={this.state.indicadorVentas}\r\n                        />                         \r\n                        <DashboardOption                             \r\n                            titulo='Compras' \r\n                            icono=\"shopping_cart\" \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '500px',\r\n                                                height    : '300px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoCompras,\r\n                                                options    : {\r\n                                                                 title: 'Compras por Producto',\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />\r\n                        <DashboardOption                            \r\n                            titulo='Ventas' \r\n                            icono=\"shopping_cart\" \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '500px',\r\n                                                height    : '300px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoCompras,\r\n                                                options    : {\r\n                                                                 title: 'Compras por Producto',\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />                    \r\n                    </ul>\r\n                </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default DashboardContainer\r\n"]},"metadata":{},"sourceType":"module"}