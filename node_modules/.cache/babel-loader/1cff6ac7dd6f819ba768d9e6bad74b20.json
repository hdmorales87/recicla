{"ast":null,"code":"import _classCallCheck from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\data_grid\\\\DataGridContainer.js\";\n\n/**\r\n* CLASS DataGridContainer\r\n*\r\n* Contiene el contenedor de la tabla de datos\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport DataGridList from './DataGridList';\nimport Table from 'react-bootstrap/Table';\nimport { cargarFilas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\n\nvar DataGridContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DataGridContainer, _Component);\n\n  function DataGridContainer(props) {\n    var _this;\n\n    _classCallCheck(this, DataGridContainer);\n\n    var arrayContent = [];\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DataGridContainer).call(this, props));\n    _this.state = {\n      content: arrayContent\n    };\n    return _this;\n  }\n\n  _createClass(DataGridContainer, [{\n    key: \"handleClick\",\n    value: function handleClick(val) {\n      this.setState({\n        justClicked: val\n      });\n    }\n  }, {\n    key: \"cargaFilas\",\n    value: function cargaFilas() {\n      var _this2 = this;\n\n      var searchWord = '';\n      var showRecords = 15;\n      var offsetRecord = 0;\n      var date1 = this.props.date1;\n      var date2 = this.props.date2;\n\n      if (this.props.parametro !== undefined) {\n        if (this.props.parametro.hasOwnProperty('searchWord')) {\n          searchWord = this.props.parametro.searchWord;\n          showRecords = this.props.parametro.showRecords;\n          offsetRecord = this.props.parametro.offsetRecord;\n        }\n      } //Ajax a la API que trae los registros\n\n\n      cargarFilas(this.props.apiField, searchWord, showRecords, offsetRecord, date1, date2, this.props.sqlParams).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          _this2.setState({\n            content: response\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.cargaFilas();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.parametro !== prevProps.parametro) {\n        this.cargaFilas();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.content.length > 0) {\n        return (//carga dinamica de la cabecera y del listado\n          React.createElement(\"div\", {\n            id: \"no-more-tables\",\n            ref: this.props.divPDF,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 66\n            },\n            __self: this\n          }, React.createElement(Table, {\n            className: \"tableDataGrid\",\n            responsive: true,\n            id: \"table-to-xls\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 67\n            },\n            __self: this\n          }, React.createElement(\"thead\", {\n            className: \"cf\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68\n            },\n            __self: this\n          }, React.createElement(\"tr\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 69\n            },\n            __self: this\n          }, React.createElement(\"th\", {\n            style: {\n              fontSize: '12px'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, \"No\"), this.props.colsData.map(function (colsData, i) {\n            return React.createElement(\"th\", {\n              key: i,\n              style: {\n                fontSize: '12px'\n              },\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 73\n              },\n              __self: this\n            }, colsData.label);\n          }))), React.createElement(DataGridList, {\n            listado: this.state.content,\n            titulo: this.props.titulo,\n            funcionClick: this.props.funcionClick,\n            colsData: this.props.colsData,\n            apiField: this.props.apiField,\n            formFields: this.props.formFields,\n            mainContainer: this.props.mainContainer,\n            colsHeaders: this.props.colsHeaders,\n            automatica: this.props.automatica,\n            funcionEdit: this.props.funcionEdit,\n            funcionEditParams: this.props.funcionEditParams,\n            enableBtnEdit: this.props.enableBtnEdit,\n            enableBtnDel: this.props.enableBtnDel,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 78\n            },\n            __self: this\n          })))\n        );\n      } else {\n        return React.createElement(\"div\", {\n          className: \"titulo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        }, \"No hay registros...\");\n      }\n    }\n  }]);\n\n  return DataGridContainer;\n}(Component);\n\nexport default DataGridContainer;","map":{"version":3,"sources":["F:\\PROYECTOS\\recicla\\src\\components\\data_grid\\DataGridContainer.js"],"names":["React","Component","DataGridList","Table","cargarFilas","alertify","DataGridContainer","props","arrayContent","state","content","val","setState","justClicked","searchWord","showRecords","offsetRecord","date1","date2","parametro","undefined","hasOwnProperty","apiField","sqlParams","then","res","response","data","msg","alert","detail","catch","err","cargaFilas","prevProps","length","divPDF","fontSize","colsData","map","i","label","titulo","funcionClick","formFields","mainContainer","colsHeaders","automatica","funcionEdit","funcionEditParams","enableBtnEdit","enableBtnDel"],"mappings":"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","sourcesContent":["/**\r\n* CLASS DataGridContainer\r\n*\r\n* Contiene el contenedor de la tabla de datos\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\n\r\nimport React, { Component } from 'react';\r\nimport DataGridList from './DataGridList';\r\nimport Table from 'react-bootstrap/Table';\r\nimport {cargarFilas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\n\r\nclass DataGridContainer extends Component {\r\n    constructor(props) {\r\n        let  arrayContent = [];\r\n        super(props);\r\n        this.state = {  \r\n                        content :  arrayContent\r\n                     }\r\n    }\r\n  \thandleClick(val) {\r\n  \t  \tthis.setState({ justClicked: val });\r\n  \t}\r\n    cargaFilas(){\r\n        let searchWord   = '';\r\n        let showRecords  = 15;\r\n        let offsetRecord = 0; \r\n        let date1 = this.props.date1;\r\n        let date2 = this.props.date2;\r\n        if(this.props.parametro !== undefined){\r\n            if(this.props.parametro.hasOwnProperty('searchWord')){\r\n                searchWord = this.props.parametro.searchWord; \r\n                showRecords = this.props.parametro.showRecords;  \r\n                offsetRecord = this.props.parametro.offsetRecord;                  \r\n            }        \r\n        }        \r\n        //Ajax a la API que trae los registros\r\n        cargarFilas(this.props.apiField,searchWord,showRecords,offsetRecord,date1,date2,this.props.sqlParams)        \r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {\r\n                this.setState({ content: response })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);\r\n        });\r\n    }\r\n    componentWillMount() {\r\n        this.cargaFilas();        \r\n    }\r\n    componentDidUpdate(prevProps){        \r\n        if (this.props.parametro !== prevProps.parametro) {           \r\n           this.cargaFilas(); \r\n        }       \r\n    }\r\n  \trender() {  \r\n        if (this.state.content.length > 0) {\r\n            return (//carga dinamica de la cabecera y del listado\r\n                <div id=\"no-more-tables\" ref = {this.props.divPDF}>\r\n                    <Table className=\"tableDataGrid\" responsive id=\"table-to-xls\">\r\n                        <thead className=\"cf\">\r\n                            <tr>\r\n                                <th style={{fontSize:'12px'}}>No</th>\r\n                                {\r\n                                    this.props.colsData.map((colsData,i) => {\r\n                                        return <th key={ i } style={{fontSize:'12px'}}>{colsData.label}</th>\r\n                                    })\r\n                                }\r\n                            </tr>\r\n                        </thead>      \r\n                        <DataGridList listado={this.state.content} \r\n                                      titulo={this.props.titulo}\r\n                                      funcionClick={this.props.funcionClick} \r\n                                      colsData={this.props.colsData} \r\n                                      apiField={this.props.apiField}\r\n                                      formFields={this.props.formFields}\r\n                                      mainContainer={this.props.mainContainer}\r\n                                      colsHeaders={this.props.colsHeaders}\r\n                                      automatica={this.props.automatica}\r\n                                      funcionEdit = {this.props.funcionEdit}\r\n                                      funcionEditParams = {this.props.funcionEditParams}\r\n                                      enableBtnEdit={this.props.enableBtnEdit}\r\n                                      enableBtnDel={this.props.enableBtnDel}/>                                       \r\n                    </Table>\r\n                </div>\r\n            )\r\n        } else {\r\n            return <div className=\"titulo\">No hay registros...</div>\r\n        }\r\n    } \r\n}\r\n\r\nexport default DataGridContainer"]},"metadata":{},"sourceType":"module"}