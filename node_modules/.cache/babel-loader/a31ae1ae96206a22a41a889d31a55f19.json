{"ast":null,"code":"import _classCallCheck from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\control_panel\\\\Smtp.js\";\n\n/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport FormDataGrid from '../data_grid/FormDataGrid';\nimport { cargarFilas } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\n\nvar Smtp =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Smtp, _Component);\n\n  function Smtp(props) {\n    var _this;\n\n    _classCallCheck(this, Smtp);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Smtp).call(this, props));\n    _this.state = {\n      idRow: 0\n    };\n    var sqlParams = {\n      sqlCols: ['correo', 'servidor', 'puerto', 'autenticacion', 'password', 'seguridad_smtp'],\n      sqlEmpresa: \"true\",\n      mode: 'rows'\n    };\n    cargarFilas('companies_smtp', '', 1, 0, '', '', sqlParams, 'rows').then(function (res) {\n      var response = res.data;\n\n      if (response.msg === \"error\") {\n        alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n      } else {\n        var idRow = 0;\n\n        if (response.length > 0) {\n          idRow = response[0];\n        }\n\n        _this.setState({\n          idRow: idRow\n        }); // if(response.)                                  \n        // this.setState({ loading: false },()=>{\n        //     globalState.dispatch({\n        //         type   : \"userData\",\n        //         params : response\n        //     });                                      \n        //     globalState.dispatch({\n        //         type   : \"nameUser\",\n        //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\n        //     });\n        //     globalState.dispatch({\n        //         type   : \"nameCompany\",\n        //         params : response1[0].razon_social.toUpperCase()\n        //     });\n        //     globalState.dispatch({\n        //         type   : \"imagen_usuario\",\n        //         params : response[0].imagen_usuario\n        //     }); \n        //     globalState.dispatch({\n        //         type   : \"idRol\",\n        //         params : response[0].id_rol\n        //     });\n        // });\n\n      }\n    }).catch(function (err) {\n      alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n    });\n    return _this;\n  } // componentWillMount(){\n  //     let sqlParams = {\n  //                         sqlCols : [\n  //                             'correo',\n  //                             'servidor',\n  //                             'puerto',\n  //                             'autenticacion',\n  //                             'password',\n  //                             'seguridad_smtp'                                \n  //                         ],\n  //                         sqlEmpresa : \"true\",\n  //                         mode : 'rows'                                                 \n  //                     }\n  //     cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\n  //     .then(res => {\n  //         var response = res.data; \n  //         if (response.msg === \"error\") {\n  //             alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\n  //         } \n  //         else{\n  //             let idRow = 0;\n  //             if(response.length > 0){\n  //                 idRow = response[0];\n  //             }\n  //             this.setState({ idRow: idRow });\n  //             // if(response.)                                  \n  //             // this.setState({ loading: false },()=>{\n  //             //     globalState.dispatch({\n  //             //         type   : \"userData\",\n  //             //         params : response\n  //             //     });                                      \n  //             //     globalState.dispatch({\n  //             //         type   : \"nameUser\",\n  //             //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\n  //             //     });\n  //             //     globalState.dispatch({\n  //             //         type   : \"nameCompany\",\n  //             //         params : response1[0].razon_social.toUpperCase()\n  //             //     });\n  //             //     globalState.dispatch({\n  //             //         type   : \"imagen_usuario\",\n  //             //         params : response[0].imagen_usuario\n  //             //     }); \n  //             //     globalState.dispatch({\n  //             //         type   : \"idRol\",\n  //             //         params : response[0].id_rol\n  //             //     });\n  //             // });\n  //         }\n  //     })\n  //     .catch( err => {            \n  //         alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \n  //     });\n  // }\n  // componentDidMount(){\n  //     let sqlParams = {\n  //                         sqlCols : [\n  //                             'correo',\n  //                             'servidor',\n  //                             'puerto',\n  //                             'autenticacion',\n  //                             'password',\n  //                             'seguridad_smtp'                                \n  //                         ],\n  //                         sqlEmpresa : \"true\",\n  //                         mode : 'rows'                                                 \n  //                     }\n  //     cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\n  //     .then(res => {\n  //         var response = res.data; \n  //         if (response.msg === \"error\") {\n  //             alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\n  //         } \n  //         else{\n  //             let idRow = 0;\n  //             if(response.length > 0){\n  //                 idRow = response[0];\n  //             }\n  //             this.setState({ idRow: idRow });\n  //         }\n  //     })\n  //     .catch( err => {            \n  //         alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \n  //     });\n  // }\n\n\n  _createClass(Smtp, [{\n    key: \"render\",\n    value: function render() {\n      return (//carga el componente que contiene la grilla de datos            \n        React.createElement(FormDataGrid, {\n          parametro: {\n            idRow: this.state.idRow,\n            mainContainer: 'Smtp',\n            formulario: true,\n            titulo: 'Configuracion SMTP',\n            funcionClick: this.props.funcionClick,\n            apiField: 'companies_smtp',\n            formFields: [{\n              label: 'Servidor SMTP',\n              field: 'servidor',\n              type: 'text',\n              validation: '',\n              required: 'true'\n            }, {\n              label: 'Usuario',\n              field: 'correo',\n              type: 'text',\n              validation: 'email',\n              required: 'true'\n            }, {\n              label: 'Password',\n              field: 'password',\n              type: 'text',\n              validation: '',\n              required: 'true'\n            }, {\n              label: 'Puerto',\n              field: 'puerto',\n              type: 'text',\n              validation: 'entero',\n              required: 'true'\n            }, {\n              label: 'Seguridad',\n              field: 'seguridad_smtp',\n              type: 'select',\n              validation: '',\n              required: 'true',\n              dinamic: 'false',\n              valueName: 'nombre',\n              options: [{\n                id: 'no',\n                nombre: 'Ninguna'\n              }, {\n                id: 'tls',\n                nombre: 'TLS'\n              }, {\n                id: 'ssl',\n                nombre: 'SSL'\n              }]\n            },, {\n              label: 'Autenticacion',\n              field: 'autenticacion',\n              type: 'select',\n              validation: '',\n              required: 'true',\n              dinamic: 'false',\n              valueName: 'nombre',\n              options: [{\n                id: 'no',\n                nombre: 'No'\n              }, {\n                id: 'si',\n                nombre: 'Si'\n              }]\n            }, {\n              label: '',\n              field: 'id_empresa',\n              type: 'campo_empresa',\n              validation: '',\n              required: 'true'\n            }]\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        })\n      );\n    }\n  }]);\n\n  return Smtp;\n}(Component);\n\nexport default Smtp;","map":{"version":3,"sources":["C:\\PROYECTOS\\recicla\\src\\components\\control_panel\\Smtp.js"],"names":["React","Component","FormDataGrid","cargarFilas","alertify","Smtp","props","state","idRow","sqlParams","sqlCols","sqlEmpresa","mode","then","res","response","data","msg","alert","detail","length","setState","catch","err","mainContainer","formulario","titulo","funcionClick","apiField","formFields","label","field","type","validation","required","dinamic","valueName","options","id","nombre"],"mappings":"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","sourcesContent":["/**\r\n* CLASS Smtp\r\n*\r\n* Contiene el contenedor principal de empresas\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport FormDataGrid from '../data_grid/FormDataGrid';\r\nimport {cargarFilas} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\n\r\nclass Smtp extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            idRow : 0\r\n        };    \r\n        let sqlParams = {\r\n                            sqlCols : [\r\n                                'correo',\r\n                                'servidor',\r\n                                'puerto',\r\n                                'autenticacion',\r\n                                'password',\r\n                                'seguridad_smtp'                                \r\n                            ],\r\n                            sqlEmpresa : \"true\",\r\n                            mode : 'rows'                                                 \r\n                        }\r\n\r\n        cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } \r\n            else{\r\n                let idRow = 0;\r\n                if(response.length > 0){\r\n                    idRow = response[0];\r\n                }\r\n                this.setState({ idRow: idRow });\r\n                // if(response.)                                  \r\n                // this.setState({ loading: false },()=>{\r\n                //     globalState.dispatch({\r\n                //         type   : \"userData\",\r\n                //         params : response\r\n                //     });                                      \r\n                //     globalState.dispatch({\r\n                //         type   : \"nameUser\",\r\n                //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"nameCompany\",\r\n                //         params : response1[0].razon_social.toUpperCase()\r\n                //     });\r\n                //     globalState.dispatch({\r\n                //         type   : \"imagen_usuario\",\r\n                //         params : response[0].imagen_usuario\r\n                //     }); \r\n                //     globalState.dispatch({\r\n                //         type   : \"idRol\",\r\n                //         params : response[0].id_rol\r\n                //     });\r\n                // });\r\n                \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n        });     \r\n    }\r\n    // componentWillMount(){\r\n    //     let sqlParams = {\r\n    //                         sqlCols : [\r\n    //                             'correo',\r\n    //                             'servidor',\r\n    //                             'puerto',\r\n    //                             'autenticacion',\r\n    //                             'password',\r\n    //                             'seguridad_smtp'                                \r\n    //                         ],\r\n    //                         sqlEmpresa : \"true\",\r\n    //                         mode : 'rows'                                                 \r\n    //                     }\r\n\r\n    //     cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\r\n    //     .then(res => {\r\n    //         var response = res.data; \r\n    //         if (response.msg === \"error\") {\r\n    //             alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n    //         } \r\n    //         else{\r\n    //             let idRow = 0;\r\n    //             if(response.length > 0){\r\n    //                 idRow = response[0];\r\n    //             }\r\n    //             this.setState({ idRow: idRow });\r\n    //             // if(response.)                                  \r\n    //             // this.setState({ loading: false },()=>{\r\n    //             //     globalState.dispatch({\r\n    //             //         type   : \"userData\",\r\n    //             //         params : response\r\n    //             //     });                                      \r\n    //             //     globalState.dispatch({\r\n    //             //         type   : \"nameUser\",\r\n    //             //         params : response[0].primer_nombre.toUpperCase()+' '+response[0].primer_apellido.toUpperCase()\r\n    //             //     });\r\n    //             //     globalState.dispatch({\r\n    //             //         type   : \"nameCompany\",\r\n    //             //         params : response1[0].razon_social.toUpperCase()\r\n    //             //     });\r\n    //             //     globalState.dispatch({\r\n    //             //         type   : \"imagen_usuario\",\r\n    //             //         params : response[0].imagen_usuario\r\n    //             //     }); \r\n    //             //     globalState.dispatch({\r\n    //             //         type   : \"idRol\",\r\n    //             //         params : response[0].id_rol\r\n    //             //     });\r\n    //             // });\r\n                \r\n    //         }\r\n    //     })\r\n    //     .catch( err => {            \r\n    //         alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n    //     });\r\n    // }\r\n    // componentDidMount(){\r\n    //     let sqlParams = {\r\n    //                         sqlCols : [\r\n    //                             'correo',\r\n    //                             'servidor',\r\n    //                             'puerto',\r\n    //                             'autenticacion',\r\n    //                             'password',\r\n    //                             'seguridad_smtp'                                \r\n    //                         ],\r\n    //                         sqlEmpresa : \"true\",\r\n    //                         mode : 'rows'                                                 \r\n    //                     }\r\n\r\n    //     cargarFilas('companies_smtp','',1,0,'','',sqlParams,'rows')\r\n    //     .then(res => {\r\n    //         var response = res.data; \r\n    //         if (response.msg === \"error\") {\r\n    //             alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n    //         } \r\n    //         else{\r\n    //             let idRow = 0;\r\n    //             if(response.length > 0){\r\n    //                 idRow = response[0];\r\n    //             }\r\n    //             this.setState({ idRow: idRow });\r\n                \r\n                \r\n    //         }\r\n    //     })\r\n    //     .catch( err => {            \r\n    //         alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);                            \r\n    //     });\r\n    // }\r\n  \trender() {       \r\n        return (//carga el componente que contiene la grilla de datos            \r\n            <FormDataGrid \r\n                parametro = {\r\n                                {\r\n                                    idRow : this.state.idRow,\r\n                                    mainContainer : 'Smtp',\r\n                                    formulario : true,\r\n                                    titulo : 'Configuracion SMTP',\r\n                                    funcionClick : this.props.funcionClick,                             \r\n                                    apiField : 'companies_smtp', \r\n                                    formFields :  [{\r\n                                                        label : 'Servidor SMTP',\r\n                                                        field : 'servidor',\r\n                                                        type  : 'text',\r\n                                                        validation : '',\r\n                                                        required : 'true'                                        \r\n                                                    },\r\n                                                    {\r\n                                                        label : 'Usuario',\r\n                                                        field : 'correo',\r\n                                                        type  : 'text',\r\n                                                        validation : 'email',\r\n                                                        required : 'true'                                        \r\n                                                    },\r\n                                                    {\r\n                                                        label : 'Password',\r\n                                                        field : 'password',\r\n                                                        type  : 'text',\r\n                                                        validation : '',\r\n                                                        required : 'true'                                        \r\n                                                    },\r\n                                                    {\r\n                                                        label : 'Puerto',\r\n                                                        field : 'puerto',\r\n                                                        type  : 'text',\r\n                                                        validation : 'entero',\r\n                                                        required : 'true'                                        \r\n                                                    },                                    \r\n                                                    {\r\n                                                        label : 'Seguridad',\r\n                                                        field : 'seguridad_smtp',\r\n                                                        type  : 'select',\r\n                                                        validation : '',\r\n                                                        required : 'true',\r\n                                                        dinamic : 'false',\r\n                                                        valueName : 'nombre',\r\n                                                        options :  [{\r\n                                                                        id: 'no',\r\n                                                                        nombre: 'Ninguna',\r\n                                                                    },\r\n                                                                    {\r\n                                                                        id: 'tls',\r\n                                                                        nombre: 'TLS', \r\n                                                                    },\r\n                                                                    {\r\n                                                                        id: 'ssl',\r\n                                                                        nombre: 'SSL', \r\n                                                                    }],                                        \r\n                                                    },  \r\n                                                    ,                                    \r\n                                                    {\r\n                                                        label : 'Autenticacion',\r\n                                                        field : 'autenticacion',\r\n                                                        type  : 'select',\r\n                                                        validation : '',\r\n                                                        required : 'true',\r\n                                                        dinamic : 'false',\r\n                                                        valueName : 'nombre',\r\n                                                        options :  [{\r\n                                                                        id: 'no',\r\n                                                                        nombre: 'No',\r\n                                                                    },\r\n                                                                    {\r\n                                                                        id: 'si',\r\n                                                                        nombre: 'Si', \r\n                                                                    }],                                        \r\n                                                    },\r\n                                                    {\r\n                                                        label : '',\r\n                                                        field : 'id_empresa',\r\n                                                        type  : 'campo_empresa',\r\n                                                        validation : '',\r\n                                                        required : 'true'                                        \r\n                                                    }] \r\n                                }\r\n                            } \r\n                        \r\n            />             \r\n        )\r\n    } \r\n}\r\n\r\nexport default Smtp"]},"metadata":{},"sourceType":"module"}