{"ast":null,"code":"import _classCallCheck from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"F:\\\\PROYECTOS\\\\recicla\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"F:\\\\PROYECTOS\\\\recicla\\\\src\\\\components\\\\dashboard\\\\DashboardContainer.js\";\n\n/**\r\n* CLASS DashboardContainer\r\n*\r\n* Contiene el contenedor con los indicadores\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport DashboardOption from './DashboardOption';\nimport { cargarFilas, indicadorGraficoCompras1, indicadorGraficoVentas1, indicadorGraficoCompras2, indicadorGraficoVentas2 } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\nimport './dashboard.css';\n\nvar DashboardContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DashboardContainer, _Component);\n\n  function DashboardContainer(props) {\n    var _this;\n\n    _classCallCheck(this, DashboardContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DashboardContainer).call(this, props));\n    _this.state = {\n      indicadorCompras1: 0,\n      indicadorVentas1: 0,\n      indicadorCompras2: 0,\n      indicadorVentas2: 0,\n      graficoCompras1: [],\n      graficoVentas1: [],\n      graficoCompras2: [],\n      graficoVentas2: []\n    };\n\n    _this.cargarIndicadores(_this.props.date1, _this.props.date2);\n\n    return _this;\n  }\n\n  _createClass(DashboardContainer, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props !== prevProps) {\n        this.cargarIndicadores(this.props.date1, this.props.date2);\n      }\n    }\n  }, {\n    key: \"cargarIndicadores\",\n    value: function cargarIndicadores(date1, date2) {\n      var _this2 = this;\n\n      //cargar los indicadores\n      //formato de la fecha\n      date1 = new Date(date1.getTime() - date1.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0];\n      date2 = new Date(date2.getTime() - date2.getTimezoneOffset() * 60000).toISOString().split(\"T\")[0]; //cargar los indicadores\n      //indicador 1 de compras   \n\n      var sqlParams = {\n        sqlCols: ['COUNT(id) AS total'],\n        sqlWhere: [' AND activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_compra\"\n      };\n      cargarFilas('purchases', '', 1, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          _this2.setState({\n            indicadorCompras1: response[0].total\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />' + err);\n      }); //indicador 2 de compras \n\n      sqlParams = {\n        sqlCols: ['SUM(T1.peso * PT.precio_compra) AS total'],\n        sqlJoin: ['INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)'],\n        sqlWhere: [' AND T1.activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_compra\"\n      };\n      cargarFilas('purchases', '', 1, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          if (response[0].total !== null) {\n            _this2.setState({\n              indicadorCompras2: response[0].total\n            });\n          }\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />' + err);\n      }); //indicador 1 de ventas       \n\n      sqlParams = {\n        sqlCols: ['COUNT(id) AS total'],\n        sqlWhere: [' AND activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_venta\"\n      };\n      cargarFilas('sales', '', 1, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          _this2.setState({\n            indicadorVentas1: response[0].total\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />' + err);\n      }); //indicador 2 de ventas \n\n      sqlParams = {\n        sqlCols: ['SUM(T1.peso * PT.precio_venta) AS total'],\n        sqlJoin: ['INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)'],\n        sqlWhere: [' AND T1.activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_venta\"\n      };\n      cargarFilas('sales', '', 1, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          if (response[0].total !== null) {\n            _this2.setState({\n              indicadorVentas2: response[0].total\n            });\n          }\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />' + err);\n      }); //indicador grafico de compras 1\n\n      sqlParams = {\n        sqlCols: ['COUNT(T1.id) AS total', 'PT.nombre AS tipo_producto'],\n        sqlJoin: ['INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)'],\n        sqlWhere: [' AND T1.activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_compra\",\n        sqlGroupBy: \"T1.id_tipo_producto\"\n      };\n      cargarFilas('purchases', '', 20, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayCompras = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayCompras.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoCompras1: arrayCompras\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />' + err);\n      }); //indicador grafico de ventas 1\n\n      sqlParams = {\n        sqlCols: ['COUNT(T1.id) AS total', 'PT.nombre AS tipo_producto'],\n        sqlJoin: ['INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)'],\n        sqlWhere: [' AND T1.activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_ventas\",\n        sqlGroupBy: \"T1.id_tipo_producto\"\n      };\n      cargarFilas('sales', '', 20, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayVentas = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayVentas.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoVentas1: arrayVentas\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />' + err);\n      }); //indicador grafico de compras 2\n\n      sqlParams = {\n        sqlCols: ['SUM(T1.peso * PT.precio_compra) AS total', 'PT.nombre AS tipo_producto'],\n        sqlJoin: ['INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)'],\n        sqlWhere: [' AND T1.activo = 1'],\n        sqlEmpresa: \"true\",\n        fieldFechas: \"T1.fecha_compra\",\n        sqlGroupBy: \"T1.id_tipo_producto\"\n      };\n      cargarFilas('purchases', '', 20, 0, date1, date2, sqlParams, 'rows').then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayCompras = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayCompras.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoCompras2: arrayCompras\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />' + err);\n      });\n      indicadorGraficoCompras2(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayCompras = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayCompras.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoCompras2: arrayCompras\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />' + err);\n      });\n      indicadorGraficoVentas2(date1, date2).then(function (res) {\n        var response = res.data;\n\n        if (response.msg === \"error\") {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          var arrayVentas = [['Producto', 'Total']];\n\n          for (var i in response) {\n            arrayVentas.push([response[i].tipo_producto, response[i].total]);\n          }\n\n          _this2.setState({\n            graficoVentas2: arrayVentas\n          });\n        }\n      }).catch(function (err) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + err);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      //LOS TIPOS DE GRAFICO SON PieChart y ColumnChart                    \n      return React.createElement(\"div\", {\n        id: \"DashboardContenedor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(DashboardOption, {\n        titulo: \"Compras\",\n        tipo: \"cifra\",\n        valor: this.state.indicadorCompras1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Comprado\",\n        tipo: \"cifra\",\n        valor: '$' + this.state.indicadorCompras2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Ventas\",\n        tipo: \"cifra\",\n        valor: this.state.indicadorVentas1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Vendido\",\n        tipo: \"cifra\",\n        valor: '$' + this.state.indicadorVentas2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Compras\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '320px',\n          height: '200px',\n          loader: 'Cargando...',\n          data: this.state.graficoCompras1,\n          options: {\n            title: 'Compras por Producto(Cant)',\n            chartArea: {\n              left: -10,\n              top: 30,\n              width: \"100%\",\n              height: \"60%\"\n            },\n            legend: {\n              position: \"left\",\n              alignment: \"start\",\n              width: \"500px\",\n              textStyle: {\n                color: \"000000\",\n                fontSize: 12\n              }\n            }\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Compras\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '320px',\n          height: '200px',\n          loader: 'Cargando...',\n          data: this.state.graficoCompras2,\n          options: {\n            title: 'Compras por Producto($)',\n            chartArea: {\n              left: -10,\n              top: 30,\n              width: \"100%\",\n              height: \"60%\"\n            },\n            legend: {\n              position: \"left\",\n              alignment: \"start\",\n              width: \"500px\",\n              textStyle: {\n                color: \"000000\",\n                fontSize: 12\n              }\n            }\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Ventas\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '320px',\n          height: '200px',\n          loader: 'Cargando...',\n          data: this.state.graficoVentas1,\n          options: {\n            title: 'Ventas por Producto(Cant)',\n            chartArea: {\n              left: -10,\n              top: 30,\n              width: \"100%\",\n              height: \"60%\"\n            },\n            legend: {\n              position: \"left\",\n              alignment: \"start\",\n              width: \"500px\",\n              textStyle: {\n                color: \"000000\",\n                fontSize: 12\n              }\n            }\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361\n        },\n        __self: this\n      }), React.createElement(DashboardOption, {\n        titulo: \"Ventas\",\n        tipo: \"grafico\",\n        chartProps: [{\n          chartType: \"PieChart\",\n          width: '320px',\n          height: '200px',\n          loader: 'Cargando...',\n          data: this.state.graficoVentas2,\n          options: {\n            title: 'Ventas por Producto($)',\n            chartArea: {\n              left: -10,\n              top: 30,\n              width: \"100%\",\n              height: \"60%\"\n            },\n            legend: {\n              position: \"left\",\n              alignment: \"start\",\n              width: \"500px\",\n              textStyle: {\n                color: \"000000\",\n                fontSize: 12\n              }\n            }\n          },\n          rootProps: {\n            'data-testid': '1'\n          }\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 395\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return DashboardContainer;\n}(Component);\n\nexport default DashboardContainer;","map":{"version":3,"sources":["F:\\PROYECTOS\\recicla\\src\\components\\dashboard\\DashboardContainer.js"],"names":["React","Component","DashboardOption","cargarFilas","indicadorGraficoCompras1","indicadorGraficoVentas1","indicadorGraficoCompras2","indicadorGraficoVentas2","alertify","DashboardContainer","props","state","indicadorCompras1","indicadorVentas1","indicadorCompras2","indicadorVentas2","graficoCompras1","graficoVentas1","graficoCompras2","graficoVentas2","cargarIndicadores","date1","date2","prevProps","Date","getTime","getTimezoneOffset","toISOString","split","sqlParams","sqlCols","sqlWhere","sqlEmpresa","fieldFechas","then","res","response","data","msg","alert","detail","setState","total","catch","err","sqlJoin","sqlGroupBy","arrayCompras","i","push","tipo_producto","arrayVentas","chartType","width","height","loader","options","title","chartArea","left","top","legend","position","alignment","textStyle","color","fontSize","rootProps"],"mappings":"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","sourcesContent":["/**\r\n* CLASS DashboardContainer\r\n*\r\n* Contiene el contenedor con los indicadores\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport DashboardOption from './DashboardOption';\r\nimport {cargarFilas,        \r\n        indicadorGraficoCompras1,\r\n        indicadorGraficoVentas1,\r\n        indicadorGraficoCompras2,\r\n        indicadorGraficoVentas2} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\nimport './dashboard.css';\r\n\r\nclass DashboardContainer extends Component {\r\n    constructor(props){\r\n        super(props);  \r\n        this.state={\r\n            indicadorCompras1 : 0,\r\n            indicadorVentas1  : 0,\r\n            indicadorCompras2 : 0,\r\n            indicadorVentas2  : 0,\r\n            graficoCompras1 : [],\r\n            graficoVentas1  : [],\r\n            graficoCompras2 : [],\r\n            graficoVentas2  : []\r\n        };\r\n        this.cargarIndicadores(this.props.date1,this.props.date2);    \r\n    }\r\n    componentDidUpdate(prevProps){   \r\n        if (this.props !== prevProps) {           \r\n           this.cargarIndicadores(this.props.date1,this.props.date2); \r\n        }\r\n    }\r\n    cargarIndicadores(date1,date2){  //cargar los indicadores\r\n        //formato de la fecha\r\n        date1 = new Date(date1.getTime() - (date1.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\r\n        date2 = new Date(date2.getTime() - (date2.getTimezoneOffset() * 60000 )).toISOString().split(\"T\")[0];\r\n        //cargar los indicadores\r\n        //indicador 1 de compras   \r\n        let sqlParams = {\r\n                            sqlCols : [\r\n                                'COUNT(id) AS total'\r\n                            ],\r\n                            sqlWhere : [ ' AND activo = 1' ],    \r\n                            sqlEmpresa : \"true\",\r\n                            fieldFechas : \"T1.fecha_compra\"                        \r\n                                                                                                         \r\n                        }\r\n        cargarFilas('purchases','',1,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                           \r\n                this.setState({ indicadorCompras1: response[0].total });                \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />'+err);\r\n        });\r\n        //indicador 2 de compras \r\n        sqlParams = {\r\n                        sqlCols : [\r\n                            'SUM(T1.peso * PT.precio_compra) AS total',                                \r\n                        ],\r\n                        sqlJoin : [\r\n                            'INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)',                                 \r\n                        ],\r\n                        sqlWhere : [ ' AND T1.activo = 1' ],    \r\n                        sqlEmpresa : \"true\",\r\n                        fieldFechas : \"T1.fecha_compra\"                        \r\n                                                                                                     \r\n                    }\r\n        cargarFilas('purchases','',1,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {    \r\n                if(response[0].total !== null){\r\n                    this.setState({ indicadorCompras2: response[0].total });\r\n                }              \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />'+err);\r\n        }); \r\n        //indicador 1 de ventas       \r\n        sqlParams = {\r\n                            sqlCols : [\r\n                                'COUNT(id) AS total'\r\n                            ],\r\n                            sqlWhere : [ ' AND activo = 1' ],    \r\n                            sqlEmpresa : \"true\",\r\n                            fieldFechas : \"T1.fecha_venta\"                        \r\n                                                                                                         \r\n                        }\r\n        cargarFilas('sales','',1,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                           \r\n                this.setState({ indicadorVentas1: response[0].total });                 \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />'+err);\r\n        }); \r\n        //indicador 2 de ventas \r\n        sqlParams = {\r\n                        sqlCols : [\r\n                            'SUM(T1.peso * PT.precio_venta) AS total',                                \r\n                        ],\r\n                        sqlJoin : [\r\n                            'INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)',                                 \r\n                        ],\r\n                        sqlWhere : [ ' AND T1.activo = 1' ],    \r\n                        sqlEmpresa : \"true\",\r\n                        fieldFechas : \"T1.fecha_venta\"                        \r\n                                                                                                     \r\n                    }\r\n        cargarFilas('sales','',1,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {    \r\n                if(response[0].total !== null){\r\n                    this.setState({ indicadorVentas2: response[0].total });\r\n                }              \r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorttt!<br />'+err);\r\n        });      \r\n        //indicador grafico de compras 1\r\n        sqlParams = {\r\n                        sqlCols : [\r\n                            'COUNT(T1.id) AS total',\r\n                            'PT.nombre AS tipo_producto',                                \r\n                        ],\r\n                        sqlJoin : [\r\n                            'INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)',                                 \r\n                        ],\r\n                        sqlWhere : [ ' AND T1.activo = 1' ],    \r\n                        sqlEmpresa : \"true\",\r\n                        fieldFechas : \"T1.fecha_compra\",\r\n                        sqlGroupBy : \"T1.id_tipo_producto\"                                            \r\n                    }\r\n        cargarFilas('purchases','',20,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayCompras = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayCompras.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                                \r\n                this.setState({ graficoCompras1: arrayCompras })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />'+err);\r\n        });\r\n        //indicador grafico de ventas 1\r\n        sqlParams = {\r\n                        sqlCols : [\r\n                            'COUNT(T1.id) AS total',\r\n                            'PT.nombre AS tipo_producto',                                \r\n                        ],\r\n                        sqlJoin : [\r\n                            'INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)',                                 \r\n                        ],\r\n                        sqlWhere : [ ' AND T1.activo = 1' ],    \r\n                        sqlEmpresa : \"true\",\r\n                        fieldFechas : \"T1.fecha_ventas\",\r\n                        sqlGroupBy : \"T1.id_tipo_producto\"                                            \r\n                    }\r\n        cargarFilas('sales','',20,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayVentas = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayVentas.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                                \r\n                this.setState({ graficoVentas1: arrayVentas })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />'+err);\r\n        });\r\n        //indicador grafico de compras 2\r\n        sqlParams = {\r\n                        sqlCols : [\r\n                            'SUM(T1.peso * PT.precio_compra) AS total',\r\n                            'PT.nombre AS tipo_producto',                                \r\n                        ],\r\n                        sqlJoin : [\r\n                            'INNER JOIN product_types AS PT ON (PT.id = T1.id_tipo_producto)',                                 \r\n                        ],\r\n                        sqlWhere : [ ' AND T1.activo = 1' ],    \r\n                        sqlEmpresa : \"true\",\r\n                        fieldFechas : \"T1.fecha_compra\",\r\n                        sqlGroupBy : \"T1.id_tipo_producto\"                                            \r\n                    }\r\n        cargarFilas('purchases','',20,0,date1,date2,sqlParams,'rows')\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayCompras = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayCompras.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                                \r\n                this.setState({ graficoCompras2: arrayCompras })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />'+err);\r\n        });        \r\n\r\n        indicadorGraficoCompras2(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayCompras = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayCompras.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                                \r\n                this.setState({ graficoCompras2: arrayCompras })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidorrrrrr!<br />'+err);\r\n        });\r\n\r\n        indicadorGraficoVentas2(date1,date2)\r\n        .then(res => {\r\n            var response = res.data; \r\n            if (response.msg === \"error\") {\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail);\r\n            } else {                \r\n                var arrayVentas = [['Producto', 'Total']];                \r\n                for(var i in response){\r\n                    arrayVentas.push([response[i].tipo_producto,response[i].total]);                    \r\n                }                             \r\n                this.setState({ graficoVentas2: arrayVentas })\r\n            }\r\n        })\r\n        .catch( err => {            \r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+err);\r\n        });\r\n    }\r\n  \trender() {\r\n        //LOS TIPOS DE GRAFICO SON PieChart y ColumnChart                    \r\n        return ( \r\n            <div id=\"DashboardContenedor\">\r\n                    <ul>\r\n                        <DashboardOption                              \r\n                            titulo='Compras'                            \r\n                            tipo=\"cifra\" \r\n                            valor={this.state.indicadorCompras1}\r\n                        /> \r\n                        <DashboardOption                              \r\n                            titulo='Comprado'                            \r\n                            tipo=\"cifra\" \r\n                            valor={'$'+this.state.indicadorCompras2}\r\n                        />   \r\n                        <DashboardOption                             \r\n                            titulo='Ventas'                             \r\n                            tipo=\"cifra\" \r\n                            valor={this.state.indicadorVentas1}\r\n                        />\r\n                        <DashboardOption                             \r\n                            titulo='Vendido'                             \r\n                            tipo=\"cifra\" \r\n                            valor={'$'+this.state.indicadorVentas2}\r\n                        />                           \r\n                        <DashboardOption                             \r\n                            titulo='Compras'                            \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '320px',\r\n                                                height    : '200px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoCompras1,\r\n                                                options    : {\r\n                                                                 title: 'Compras por Producto(Cant)',\r\n                                                                 chartArea: {\r\n                                                                    left: -10,\r\n                                                                    top: 30,\r\n                                                                    width: \"100%\",\r\n                                                                    height: \"60%\"\r\n                                                                 },\r\n                                                                 legend: {\r\n                                                                    position: \"left\",\r\n                                                                    alignment: \"start\",\r\n                                                                    width: \"500px\",\r\n                                                                    textStyle: {\r\n                                                                      color: \"000000\",\r\n                                                                      fontSize: 12\r\n                                                                    }\r\n                                                                  },\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />\r\n                         <DashboardOption                             \r\n                            titulo='Compras'                            \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '320px',\r\n                                                height    : '200px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoCompras2,\r\n                                                options    : {\r\n                                                                 title: 'Compras por Producto($)',\r\n                                                                 chartArea: {\r\n                                                                    left: -10,\r\n                                                                    top: 30,\r\n                                                                    width: \"100%\",\r\n                                                                    height: \"60%\"\r\n                                                                 },\r\n                                                                 legend: {\r\n                                                                    position: \"left\",\r\n                                                                    alignment: \"start\",\r\n                                                                    width: \"500px\",\r\n                                                                    textStyle: {\r\n                                                                      color: \"000000\",\r\n                                                                      fontSize: 12\r\n                                                                    }\r\n                                                                  },\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />\r\n                        <DashboardOption                            \r\n                            titulo='Ventas'                              \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '320px',\r\n                                                height    : '200px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoVentas1,\r\n                                                options    : {\r\n                                                                 title: 'Ventas por Producto(Cant)',\r\n                                                                 chartArea: {\r\n                                                                    left: -10,\r\n                                                                    top: 30,\r\n                                                                    width: \"100%\",\r\n                                                                    height: \"60%\"\r\n                                                                 },\r\n                                                                 legend: {\r\n                                                                    position: \"left\",\r\n                                                                    alignment: \"start\",\r\n                                                                    width: \"500px\",\r\n                                                                    textStyle: {\r\n                                                                      color: \"000000\",\r\n                                                                      fontSize: 12\r\n                                                                    }\r\n                                                                  },\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />   \r\n                        <DashboardOption                            \r\n                            titulo='Ventas'                              \r\n                            tipo=\"grafico\"                                                 \r\n                            chartProps= {[\r\n                                            {\r\n                                                chartType : \"PieChart\",\r\n                                                width     : '320px',\r\n                                                height    : '200px',\r\n                                                loader    : 'Cargando...',\r\n                                                data      :  this.state.graficoVentas2,\r\n                                                options    : {\r\n                                                                 title: 'Ventas por Producto($)',\r\n                                                                 chartArea: {\r\n                                                                    left: -10,\r\n                                                                    top: 30,\r\n                                                                    width: \"100%\",\r\n                                                                    height: \"60%\"\r\n                                                                 },\r\n                                                                 legend: {\r\n                                                                    position: \"left\",\r\n                                                                    alignment: \"start\",\r\n                                                                    width: \"500px\",\r\n                                                                    textStyle: {\r\n                                                                      color: \"000000\",\r\n                                                                      fontSize: 12\r\n                                                                    }\r\n                                                                  },\r\n                                                             },\r\n                                                rootProps  : { \r\n                                                                 'data-testid': '1' \r\n                                                             }\r\n                                            }    \r\n                                         ]}  \r\n                        />                    \r\n                    </ul>\r\n                </div>\r\n        );\r\n    } \r\n}\r\n\r\nexport default DashboardContainer\r\n"]},"metadata":{},"sourceType":"module"}