{"ast":null,"code":"import _defineProperty from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\PROYECTOS\\\\chatarreria-front\\\\src\\\\components\\\\data_grid\\\\FormDataGrid.js\";\n\n/**\r\n* CLASS FormDataGrid\r\n*\r\n* Contiene el formulario dinamico del datagrid\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\nimport React, { Component } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport ComboBoxFormDataGrid from './ComboBoxFormDataGrid';\nimport configJson from '../configuration/configuration.json';\nimport { divMouseOver, divMouseOut } from '../configuration/GlobalFunctions';\nimport { insertarActualizarFila } from '../api_calls/ApiCalls';\nimport alertify from 'alertifyjs';\nimport '../../css/alertify.css';\n\nvar FormDataGrid =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FormDataGrid, _Component);\n\n  function FormDataGrid(props) {\n    var _this;\n\n    _classCallCheck(this, FormDataGrid);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FormDataGrid).call(this, props)); //cargar dinamicamente los estados\n\n    _this.state = {};\n\n    _this.props.parametro.formFields.forEach(function (formFields, i) {\n      if (_this.props.parametro.idRow !== 0) {\n        if (_this.props.parametro.idRow[formFields.field] === '' || _this.props.parametro.idRow[formFields.field] === undefined || _this.props.parametro.idRow[formFields.field] === null) {\n          _this.state[formFields.field] = '';\n        } else {\n          _this.state[formFields.field] = _this.props.parametro.idRow[formFields.field];\n        }\n      } else {\n        if (formFields.type === 'select') {\n          _this.state[formFields.field] = 1;\n        } else {\n          _this.state[formFields.field] = '';\n        }\n      }\n    }); //botones de cancelar y guardar      \n\n\n    _this.handleCancelButton = _this.handleCancelButton.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleSaveButton = _this.handleSaveButton.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(FormDataGrid, [{\n    key: \"handleCancelButton\",\n    value: function handleCancelButton() {\n      this.props.funcionClick(this.props.parametro.mainContainer);\n    }\n  }, {\n    key: \"handleSaveButton\",\n    value: function handleSaveButton(id) {\n      var _this2 = this;\n\n      //recorrido dinamico de los campos y cargar dinamicamente el arrayData\n      var arrayData = {};\n      var errors = 0;\n      this.props.parametro.formFields.forEach(function (formFields, i) {\n        if ((_this2.state[formFields.field] === undefined || _this2.state[formFields.field] === '') && formFields.required === 'true') {\n          alertify.error('Digite el campo ' + formFields.label + '!');\n          errors++;\n          return;\n        } else {\n          arrayData[formFields.field] = _this2.state[formFields.field];\n        }\n      }); //hay errores?\n\n      if (errors > 0) {\n        return;\n      }\n\n      var method = '';\n\n      if (id > 0) {\n        //si es update o insert           \n        method = 'put';\n        arrayData['id'] = id; //mandar el ID\n      } else {\n        method = 'post';\n      } //ajax que llama a la API para insertar o actualizar        \n\n\n      insertarActualizarFila(method, this.props.parametro.apiField, arrayData).then(function (response) {\n        response = response.data;\n\n        if (response.msg === 'error') {\n          alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: ' + response.detail);\n        } else {\n          //aqui es donde refresca el datagrid una vez se han hecho los cambios\n          _this2.props.funcionClick(_this2.props.parametro.mainContainer);\n        }\n      }).catch(function (error) {\n        alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />' + error);\n      });\n    } //manejo dinamico de los estados, con esto actualizo el valor de cualquier campo para enviarlos a la API\n\n  }, {\n    key: \"handleStateChange\",\n    value: function handleStateChange(e) {\n      this.setState(_defineProperty({}, e.target.name, e.target.value));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var titulo = 'Agregar';\n      var id = 0;\n\n      if (this.props.parametro.idRow !== 0) {\n        titulo = 'Editar';\n        id = this.props.parametro.idRow.id;\n      }\n\n      console.log(this.props.parametro.formFields);\n      return (//carga dinamica del formulario\t  \t\t  \t  \t\n        React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"content\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"table-responsive mt-4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"titulo\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          },\n          __self: this\n        }, titulo, \" \", this.props.parametro.titulo)), React.createElement(\"hr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          className: \"table-responsive mb-3\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, React.createElement(Form, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          },\n          __self: this\n        }, //cargar dinamicamente los campos, dependiendo si es input o select\n        this.props.parametro.formFields.forEach(function (formFields, i) {\n          if (formFields.type === 'text') {\n            console.log('holaaa');\n            return React.createElement(Form.Group, {\n              key: i,\n              controlId: \"formBasicTipoCompra\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 124\n              },\n              __self: this\n            }, React.createElement(Form.Label, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 125\n              },\n              __self: this\n            }, formFields.label));\n          } else if (formFields.type === 'select') {\n            return React.createElement(Form.Group, {\n              key: i,\n              controlId: \"formBasicTipoCompra\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 130\n              },\n              __self: this\n            }, React.createElement(Form.Label, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 131\n              },\n              __self: this\n            }, formFields.label), React.createElement(ComboBoxFormDataGrid, {\n              valueName: formFields.valueName,\n              options: formFields.options,\n              apiField: formFields.apiField,\n              dinamic: formFields.dinamic,\n              name: formFields.field,\n              type: formFields.type,\n              functionChange: _this3.handleStateChange.bind(_this3),\n              value: _this3.state[formFields.field],\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 132\n              },\n              __self: this\n            }));\n          }\n        }), React.createElement(Button, {\n          id: \"formGridBtnSave\",\n          className: \"float-left mr-3\",\n          variant: \"primary\",\n          onClick: this.handleSaveButton.bind(this, id),\n          style: {\n            backgroundColor: configJson.fondoBotonGrilla\n          },\n          onMouseOut: divMouseOut.bind(this, 'formGridBtnSave', configJson.fondoBotonGrilla),\n          onMouseOver: divMouseOver.bind(this, 'formGridBtnSave', configJson.fondoBotonGrilla),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"GUARDAR\"), React.createElement(Button, {\n          variant: \"secondary\",\n          onClick: this.handleCancelButton.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"CANCELAR\")))))\n      );\n    }\n  }]);\n\n  return FormDataGrid;\n}(Component);\n\nexport default FormDataGrid;","map":{"version":3,"sources":["C:\\PROYECTOS\\chatarreria-front\\src\\components\\data_grid\\FormDataGrid.js"],"names":["React","Component","Form","Button","ComboBoxFormDataGrid","configJson","divMouseOver","divMouseOut","insertarActualizarFila","alertify","FormDataGrid","props","state","parametro","formFields","forEach","i","idRow","field","undefined","type","handleCancelButton","bind","handleSaveButton","funcionClick","mainContainer","id","arrayData","errors","required","error","label","method","apiField","then","response","data","msg","alert","detail","catch","e","setState","target","name","value","titulo","console","log","valueName","options","dinamic","handleStateChange","backgroundColor","fondoBotonGrilla"],"mappings":"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","sourcesContent":["/**\r\n* CLASS FormDataGrid\r\n*\r\n* Contiene el formulario dinamico del datagrid\r\n*\r\n* @author Hector Morales <warrior1987@gmail.com>\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport ComboBoxFormDataGrid from './ComboBoxFormDataGrid';\r\nimport configJson from '../configuration/configuration.json';\r\nimport {divMouseOver,divMouseOut} from '../configuration/GlobalFunctions';\r\nimport {insertarActualizarFila} from '../api_calls/ApiCalls';\r\nimport alertify from 'alertifyjs';\r\nimport '../../css/alertify.css';\r\n\r\nclass FormDataGrid extends Component {\r\n  \t\r\n  \tconstructor(props) {\r\n        super(props);\r\n        //cargar dinamicamente los estados\r\n        this.state = {};\r\n        \r\n        this.props.parametro.formFields.forEach((formFields,i) => {\r\n            if(this.props.parametro.idRow !== 0){                \r\n                if(this.props.parametro.idRow[formFields.field] === '' || this.props.parametro.idRow[formFields.field] === undefined || this.props.parametro.idRow[formFields.field] === null){\r\n                    this.state[formFields.field] = '';\r\n                }\r\n                else{\r\n                    this.state[formFields.field] = this.props.parametro.idRow[formFields.field];             \r\n                }\r\n            }\r\n            else{\r\n                if(formFields.type==='select'){\r\n                    this.state[formFields.field] = 1;            \r\n                }\r\n                else{\r\n                    this.state[formFields.field] = '';         \r\n                }                \r\n            }\r\n        });    \r\n        //botones de cancelar y guardar      \r\n        this.handleCancelButton = this.handleCancelButton.bind(this);\r\n        this.handleSaveButton   = this.handleSaveButton.bind(this);\r\n    }   \r\n    handleCancelButton(){\r\n        this.props.funcionClick(this.props.parametro.mainContainer);        \r\n    }\r\n    handleSaveButton(id){\r\n\r\n        //recorrido dinamico de los campos y cargar dinamicamente el arrayData\r\n        var arrayData = {};\r\n        var errors = 0;\r\n\r\n\r\n        this.props.parametro.formFields.forEach((formFields,i) => {\r\n            if((this.state[formFields.field] === undefined || this.state[formFields.field] === '') && formFields.required === 'true'){\r\n                alertify.error('Digite el campo '+formFields.label+'!'); \r\n                errors++;\r\n                return;\r\n            } \r\n            else{\r\n                arrayData[formFields.field] = this.state[formFields.field];\r\n            }\r\n        });\r\n        //hay errores?\r\n        if(errors > 0){\r\n            return;\r\n        }            \r\n      \r\n        var method = '';\r\n\r\n        if(id>0){//si es update o insert           \r\n            method = 'put';\r\n            arrayData['id'] = id;//mandar el ID\r\n        }\r\n        else{            \r\n            method = 'post';\r\n        }        \r\n        //ajax que llama a la API para insertar o actualizar        \r\n        insertarActualizarFila(method,this.props.parametro.apiField,arrayData)\r\n        .then(response => {\r\n            response = response.data;\r\n            if(response.msg === 'error'){\r\n                alertify.alert('Error!', 'Ha ocurrido un error accesando a la base de datos!<br />Codigo de Error: '+response.detail); \r\n            }\r\n            else {\r\n                //aqui es donde refresca el datagrid una vez se han hecho los cambios\r\n                this.props.funcionClick(this.props.parametro.mainContainer);              \r\n            }\r\n        })\r\n        .catch(function (error) {\r\n            alertify.alert('Error!', 'No se ha logrado la conexion con el servidor!<br />'+error);\r\n        });\r\n    }\r\n    //manejo dinamico de los estados, con esto actualizo el valor de cualquier campo para enviarlos a la API\r\n    handleStateChange(e) {       \r\n        this.setState({ [e.target.name]: e.target.value });     \r\n    }    \r\n  \trender() {\r\n  \t\t  var titulo = 'Agregar';\r\n          var id = 0;\r\n  \t\t  if(this.props.parametro.idRow !== 0){\r\n  \t\t  \t  titulo = 'Editar';\r\n              id = this.props.parametro.idRow.id;\r\n  \t\t  }   \r\n          console.log(this.props.parametro.formFields);       \t\t\t\r\n  \t\t  return (  //carga dinamica del formulario\t  \t\t  \t  \t\r\n  \t  \t\t<div className=\"container\">\r\n                <div className=\"content\">\r\n                    <div className=\"table-responsive mt-4\">\r\n                        <div className=\"titulo\">{titulo} {this.props.parametro.titulo}</div>\r\n                    </div>\r\n                    <hr />\r\n                    <div className=\"table-responsive mb-3\">\t\r\n  \t \t\t    \t\t<Form>\r\n                            {\r\n                                //cargar dinamicamente los campos, dependiendo si es input o select\r\n                                this.props.parametro.formFields.forEach((formFields,i) => {                                    \r\n                                    if(formFields.type === 'text'){\r\n                                        console.log('holaaa');\r\n                                        return (<Form.Group key= {i} controlId=\"formBasicTipoCompra\">\r\n                                                    <Form.Label>{formFields.label}</Form.Label>\r\n                                                    \r\n                                               </Form.Group>);\r\n                                    }\r\n                                    else if(formFields.type === 'select'){\r\n                                        return <Form.Group key= {i} controlId=\"formBasicTipoCompra\">\r\n                                                    <Form.Label>{formFields.label}</Form.Label>\r\n                                                    <ComboBoxFormDataGrid valueName = {formFields.valueName} options = {formFields.options} apiField={formFields.apiField} dinamic={formFields.dinamic} name = {formFields.field} type={formFields.type} functionChange={this.handleStateChange.bind(this)} value={this.state[formFields.field]}/>                               \r\n                                               </Form.Group>\r\n                                    }                                    \r\n                                    \r\n                                })\r\n                            }\t\t\t\t\t\t  \t\t\t\t\t\t\t  \t\t\t\t\t\t  \t\r\n\t\t\t\t\t\t  \t<Button id=\"formGridBtnSave\" className=\"float-left mr-3\" variant=\"primary\" onClick={this.handleSaveButton.bind(this,id)} style={{backgroundColor:configJson.fondoBotonGrilla}} onMouseOut={divMouseOut.bind(this,'formGridBtnSave',configJson.fondoBotonGrilla)} onMouseOver={divMouseOver.bind(this,'formGridBtnSave',configJson.fondoBotonGrilla)}>\r\n\t\t\t\t\t\t  \t  \tGUARDAR\r\n\t\t\t\t\t\t  \t</Button>\r\n\t\t\t\t\t\t  \t<Button variant=\"secondary\" onClick={this.handleCancelButton.bind(this)}>\r\n\t\t\t\t\t\t  \t  \tCANCELAR\r\n\t\t\t\t\t\t  \t</Button>\r\n\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t</div> \r\n\t\t\t\t</div> \t  \t \t\t       \r\n\t\t\t</div> \t\r\n  \t  \t);\r\n  \t}\r\n}\r\n\r\nexport default FormDataGrid\r\n"]},"metadata":{},"sourceType":"module"}